[{"/Users/fabiolalombardi/Desktop/homebase-app/src/index.tsx":"1","/Users/fabiolalombardi/Desktop/homebase-app/src/App.tsx":"2","/Users/fabiolalombardi/Desktop/homebase-app/src/services/beacon/context.tsx":"3","/Users/fabiolalombardi/Desktop/homebase-app/src/store/index.ts":"4","/Users/fabiolalombardi/Desktop/homebase-app/src/router/explorer.tsx":"5","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/common/ScrollToTop.tsx":"6","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/common/Toolbar.tsx":"7","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/state/context.tsx":"8","/Users/fabiolalombardi/Desktop/homebase-app/src/store/funds/reducer.ts":"9","/Users/fabiolalombardi/Desktop/homebase-app/src/store/wallet/reducer.ts":"10","/Users/fabiolalombardi/Desktop/homebase-app/src/store/daos/reducer.ts":"11","/Users/fabiolalombardi/Desktop/homebase-app/src/theme/index.ts":"12","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/index.tsx":"13","/Users/fabiolalombardi/Desktop/homebase-app/src/utils.ts":"14","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/state/types.ts":"15","/Users/fabiolalombardi/Desktop/homebase-app/src/services/beacon/hooks/useTezos.ts":"16","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/Treasury.tsx":"17","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/Proposals.tsx":"18","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/DAO.tsx":"19","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/Voting.tsx":"20","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/types.ts":"21","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/List.tsx":"22","/Users/fabiolalombardi/Desktop/homebase-app/src/store/daos/action.ts":"23","/Users/fabiolalombardi/Desktop/homebase-app/src/store/wallet/action.ts":"24","/Users/fabiolalombardi/Desktop/homebase-app/src/store/funds/action.ts":"25","/Users/fabiolalombardi/Desktop/homebase-app/src/store/mock/mock.ts":"26","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/components/NavigationBar.tsx":"27","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/components/ConnectWallet.tsx":"28","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/SideBar.tsx":"29","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/ProposalTableRow.tsx":"30","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/Header.tsx":"31","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/NewProposalDialog.tsx":"32","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/TokenHoldersDialog.tsx":"33","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/SearchInput.tsx":"34","/Users/fabiolalombardi/Desktop/homebase-app/src/services/beacon/index.ts":"35","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/index.tsx":"36","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/TokenSettings.tsx":"37","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/Review.tsx":"38","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/Governance.tsx":"39","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/DaoSettings.tsx":"40","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/Summary.tsx":"41","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/SelectTemplate.tsx":"42","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/utils.ts":"43","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/TokenHoldersRow.tsx":"44","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/state/utils.ts":"45","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/deploy.ts":"46","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/treasuryDAO/deploy.ts":"47","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/utils.ts":"48","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/code.ts":"49","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/metadata.ts":"50","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/treasuryDAO/code.ts":"51","/Users/fabiolalombardi/Desktop/homebase-app/src/services/pinata/index.ts":"52","/Users/fabiolalombardi/Desktop/homebase-app/src/services/pinata/utils.ts":"53","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/common/hooks/useLocalStorage.ts":"54","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/proposals/types.ts":"55","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/VoteDialog.tsx":"56","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useDAOs.ts":"57","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useProposals.ts":"58","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useProposal.ts":"59","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useDAO.ts":"60","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useVote.ts":"61","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/usePropose.ts":"62","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/index.ts":"63","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useOriginateTreasury.ts":"64","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/operations/index.ts":"65","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/index.ts":"66","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/proposals/index.ts":"67","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/storage/index.ts":"68","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/ledger/index.ts":"69","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/proposals/mappers.ts":"70","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/ledger/mappers.ts":"71","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/storage/mapper.ts":"72","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/index.ts":"73"},{"size":419,"mtime":1612701204568,"results":"74","hashOfConfig":"75"},{"size":1419,"mtime":1612701204566,"results":"76","hashOfConfig":"75"},{"size":1258,"mtime":1612701204578,"results":"77","hashOfConfig":"75"},{"size":798,"mtime":1612108184344,"results":"78","hashOfConfig":"75"},{"size":937,"mtime":1612713742681,"results":"79","hashOfConfig":"75"},{"size":252,"mtime":1612096289372,"results":"80","hashOfConfig":"75"},{"size":3541,"mtime":1612721727964,"results":"81","hashOfConfig":"75"},{"size":3306,"mtime":1612713742667,"results":"82","hashOfConfig":"75"},{"size":624,"mtime":1612713742692,"results":"83","hashOfConfig":"75"},{"size":409,"mtime":1609964133663,"results":"84","hashOfConfig":"75"},{"size":305,"mtime":1612096303345,"results":"85","hashOfConfig":"75"},{"size":4368,"mtime":1612096289402,"results":"86","hashOfConfig":"75"},{"size":3669,"mtime":1612701204569,"results":"87","hashOfConfig":"75"},{"size":200,"mtime":1611005307550,"results":"88","hashOfConfig":"75"},{"size":2425,"mtime":1612701204570,"results":"89","hashOfConfig":"75"},{"size":1083,"mtime":1612713742686,"results":"90","hashOfConfig":"75"},{"size":3296,"mtime":1612096289387,"results":"91","hashOfConfig":"75"},{"size":9348,"mtime":1612713742679,"results":"92","hashOfConfig":"75"},{"size":8576,"mtime":1612701187328,"results":"93","hashOfConfig":"75"},{"size":11557,"mtime":1612713742680,"results":"94","hashOfConfig":"75"},{"size":1997,"mtime":1612701204581,"results":"95","hashOfConfig":"75"},{"size":4401,"mtime":1612713742679,"results":"96","hashOfConfig":"75"},{"size":124,"mtime":1612096303344,"results":"97","hashOfConfig":"75"},{"size":145,"mtime":1609964133660,"results":"98","hashOfConfig":"75"},{"size":226,"mtime":1612096289397,"results":"99","hashOfConfig":"75"},{"size":870,"mtime":1611003853156,"results":"100","hashOfConfig":"75"},{"size":1525,"mtime":1612701204569,"results":"101","hashOfConfig":"75"},{"size":1437,"mtime":1612701204568,"results":"102","hashOfConfig":"75"},{"size":612,"mtime":1612096289384,"results":"103","hashOfConfig":"75"},{"size":4357,"mtime":1612713742674,"results":"104","hashOfConfig":"75"},{"size":1145,"mtime":1612096289381,"results":"105","hashOfConfig":"75"},{"size":14212,"mtime":1612713742673,"results":"106","hashOfConfig":"75"},{"size":4199,"mtime":1612701187328,"results":"107","hashOfConfig":"75"},{"size":1246,"mtime":1612096289383,"results":"108","hashOfConfig":"75"},{"size":1474,"mtime":1612701204578,"results":"109","hashOfConfig":"75"},{"size":1132,"mtime":1612701204573,"results":"110","hashOfConfig":"75"},{"size":10665,"mtime":1612713742671,"results":"111","hashOfConfig":"75"},{"size":2840,"mtime":1612713742670,"results":"112","hashOfConfig":"75"},{"size":15624,"mtime":1612713742669,"results":"113","hashOfConfig":"75"},{"size":6799,"mtime":1612701204571,"results":"114","hashOfConfig":"75"},{"size":10229,"mtime":1612713742670,"results":"115","hashOfConfig":"75"},{"size":4497,"mtime":1612701204572,"results":"116","hashOfConfig":"75"},{"size":1321,"mtime":1612713742672,"results":"117","hashOfConfig":"75"},{"size":975,"mtime":1612713742677,"results":"118","hashOfConfig":"75"},{"size":1864,"mtime":1612713742668,"results":"119","hashOfConfig":"75"},{"size":1431,"mtime":1612713742690,"results":"120","hashOfConfig":"75"},{"size":2911,"mtime":1612701204580,"results":"121","hashOfConfig":"75"},{"size":608,"mtime":1612096303342,"results":"122","hashOfConfig":"75"},{"size":242,"mtime":1612096303338,"results":"123","hashOfConfig":"75"},{"size":16189,"mtime":1612096303339,"results":"124","hashOfConfig":"75"},{"size":111595,"mtime":1612096303340,"results":"125","hashOfConfig":"75"},{"size":3223,"mtime":1612701204581,"results":"126","hashOfConfig":"75"},{"size":298,"mtime":1612096303343,"results":"127","hashOfConfig":"75"},{"size":2615,"mtime":1612713742666,"results":"128","hashOfConfig":"75"},{"size":1158,"mtime":1612713742684,"results":"129","hashOfConfig":"75"},{"size":5362,"mtime":1612713742677,"results":"130","hashOfConfig":"75"},{"size":957,"mtime":1612701204579,"results":"131","hashOfConfig":"75"},{"size":653,"mtime":1612713742688,"results":"132","hashOfConfig":"75"},{"size":550,"mtime":1612713742687,"results":"133","hashOfConfig":"75"},{"size":862,"mtime":1612713742686,"results":"134","hashOfConfig":"75"},{"size":723,"mtime":1612713742689,"results":"135","hashOfConfig":"75"},{"size":748,"mtime":1612713742688,"results":"136","hashOfConfig":"75"},{"size":4854,"mtime":1612713742689,"results":"137","hashOfConfig":"75"},{"size":560,"mtime":1612713742687,"results":"138","hashOfConfig":"75"},{"size":596,"mtime":1612713742682,"results":"139","hashOfConfig":"75"},{"size":1048,"mtime":1612096303339,"results":"140","hashOfConfig":"75"},{"size":584,"mtime":1612713742682,"results":"141","hashOfConfig":"75"},{"size":576,"mtime":1612701204577,"results":"142","hashOfConfig":"75"},{"size":574,"mtime":1612701204575,"results":"143","hashOfConfig":"75"},{"size":535,"mtime":1612713742683,"results":"144","hashOfConfig":"75"},{"size":750,"mtime":1612108184341,"results":"145","hashOfConfig":"75"},{"size":749,"mtime":1612713742684,"results":"146","hashOfConfig":"75"},{"size":57,"mtime":1612096303335,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"d502qi",{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"150"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":11,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"166","usedDeprecatedRules":"150"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"177","usedDeprecatedRules":"150"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"188","usedDeprecatedRules":"150"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"150"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"198","usedDeprecatedRules":"150"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"215","usedDeprecatedRules":"150"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"150"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"150"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"150"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"237","usedDeprecatedRules":"150"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"150"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"249","usedDeprecatedRules":"150"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"150"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"150"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"150"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"150"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"150"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"150"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"150"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"150"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"150"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"301","usedDeprecatedRules":"150"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"/Users/fabiolalombardi/Desktop/homebase-app/src/index.tsx",[],[],"/Users/fabiolalombardi/Desktop/homebase-app/src/App.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/beacon/context.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/store/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/router/explorer.tsx",["318"],"import { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport React from \"react\";\n\nimport { DAOsList } from \"../modules/daoexplorer/pages/List\";\nimport { DAO } from \"../modules/daoexplorer/pages/DAO\";\nimport { Treasury } from \"../modules/daoexplorer/pages/Treasury\";\nimport { Proposals } from \"../modules/daoexplorer/pages/Proposals\";\nimport { Voting } from \"../modules/daoexplorer/pages/Voting\";\n\nexport const DAOExplorerRouter = (): JSX.Element => {\n  const match = useRouteMatch();\n  return (\n    <Switch>\n      <Route path={`${match.url}/daos`}>\n        <DAOsList />\n      </Route>\n      <Route path={`${match.url}/dao/:id/proposal/:proposalId`}>\n        <Voting />\n      </Route>\n      <Route path={`${match.url}/dao/:id`}>\n        <Proposals />\n      </Route>\n      <Route path={`${match.url}/treasury/:id`}>\n        <Treasury />\n      </Route>\n      <Redirect to={`${match.url}/daos`} />\n    </Switch>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/common/ScrollToTop.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/common/Toolbar.tsx",["319","320","321","322","323","324","325","326","327","328","329","330","331"],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/state/context.tsx",["332"],"import React, { createContext, useReducer, Dispatch, useMemo } from \"react\";\nimport {\n  MigrationParams,\n} from \"../../../services/contracts/baseDAO/types\";\nimport useLocalStorage from \"../../common/hooks/useLocalStorage\";\nimport {\n  CreatorAction,\n  CreatorState,\n  StepperIndex,\n  ActionTypes,\n} from \"./types\";\n\nconst deploymentStatus = {\n  deploying: false,\n};\n\nexport const INITIAL_MIGRATION_STATE: MigrationParams = {\n  orgSettings: {\n    name: \"\",\n    symbol: \"\",\n    description: \"\",\n  },\n  votingSettings: {\n    votingDays: 0,\n    votingHours: 0,\n    votingMinutes: 0,\n    proposeStakeRequired: 0,\n    proposeStakePercentage: 0,\n    frozenScaleValue: 0,\n    frozenDivisionValue: 1,\n    minXtzAmount: 0,\n    maxXtzAmount: 0,\n    maxProposalSize: 0,\n    quorumTreshold: 0,\n  },\n  memberSettings: {\n    tokenHolders: [],\n    administrator: \"\",\n  },\n};\n\nexport const INITIAL_STATE: CreatorState = {\n  activeStep: StepperIndex.SELECT_TEMPLATE,\n  governanceStep: StepperIndex.SELECT_TEMPLATE,\n  data: INITIAL_MIGRATION_STATE,\n  deploymentStatus,\n};\n\nconst CreatorContext = createContext<{\n  state: CreatorState;\n  dispatch: Dispatch<CreatorAction>;\n  updateCache: (value: MigrationParams) => void;\n}>({\n  state: INITIAL_STATE,\n  dispatch: () => null,\n  updateCache: () => null,\n});\n\nexport const reducer = (\n  state: CreatorState,\n  action: CreatorAction\n): CreatorState => {\n  switch (action.type) {\n    case ActionTypes.UPDATE_DEPLOYMENT_STATUS:\n      const { contract, deploying } = action.status;\n      state = {\n        ...state,\n        deploymentStatus: {\n          contract,\n          deploying,\n        },\n      };\n      return state;\n    case ActionTypes.UPDATE_NAVIGATION_BAR:\n      state = {\n        ...state,\n        next: action.next,\n        back: action.back,\n      };\n      return state;\n    case ActionTypes.UPDATE_STEP:\n      state = {\n        ...state,\n        activeStep: action.step,\n      };\n      return state;\n    case ActionTypes.UPDATE_GOVERNANCE_STEP:\n      state = {\n        ...state,\n        governanceStep: action.step,\n      };\n      return state;\n    case ActionTypes.UPDATE_ORGANIZATION_SETTINGS:\n      state = {\n        ...state,\n        data: {\n          ...state.data,\n          orgSettings: action.org,\n        },\n      };\n      return state;\n    case ActionTypes.UPDATE_VOTING_SETTINGS:\n      state = {\n        ...state,\n        data: {\n          ...state.data,\n          votingSettings: action.voting,\n        },\n      };\n      return state;\n    case ActionTypes.UPDATE_MEMBERS_SETTINGS:\n      state = {\n        ...state,\n        data: {\n          ...state.data,\n          memberSettings: action.members,\n        },\n      };\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst CreatorProvider: React.FC = ({ children }) => {\n  const [data, updateCache] = useLocalStorage<MigrationParams>(\n    \"creatorParams\",\n    INITIAL_STATE.data\n  );\n\n  const stateWithCache = {\n    ...INITIAL_STATE,\n    data,\n  };\n\n  const [state, dispatch] = useReducer(reducer, stateWithCache);\n  const contextValue = useMemo(() => {\n    return { state, dispatch };\n  }, [state, dispatch]);\n  return (\n    <CreatorContext.Provider value={{ ...contextValue, updateCache }}>\n      {children}\n    </CreatorContext.Provider>\n  );\n};\n\nexport { CreatorProvider, CreatorContext };\n","/Users/fabiolalombardi/Desktop/homebase-app/src/store/funds/reducer.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/store/wallet/reducer.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/store/daos/reducer.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/theme/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/index.tsx",["333","334","335","336","337","338","339"],"import React, { useContext, useEffect, useMemo } from \"react\";\nimport {\n  Box,\n  Grid,\n  Paper,\n  Step,\n  StepLabel,\n  Stepper,\n  styled,\n} from \"@material-ui/core\";\nimport ProgressBar from \"react-customizable-progressbar\";\nimport { useSelector } from \"react-redux\";\n\nimport { ConnectWallet } from \"./components/ConnectWallet\";\nimport { StepInfo } from \"./state/types\";\nimport { AppState } from \"../../store\";\nimport { CreatorContext } from \"./state/context\";\nimport { CurrentStep, STEPS } from \"./steps\";\nimport { NavigationBar } from \"./components/NavigationBar\";\nimport { TezosContext } from \"../../services/beacon/context\";\nimport { addNewContractToIPFS } from \"../../services/pinata\";\n\nconst PageContainer = styled(Grid)(({ theme }) => ({\n  background: theme.palette.primary.main,\n}));\n\nconst StepContentContainer = styled(Grid)({\n  paddingLeft: \"16%\",\n  paddingRight: \"16%\",\n  alignItems: \"center\",\n  height: \"inherit\",\n});\n\nconst StepOneContentContainer = styled(Grid)({\n  paddingLeft: \"16%\",\n  paddingRight: \"16%\",\n  alignItems: \"center\",\n});\n\nconst StyledStepper = styled(Stepper)({\n  background: \"inherit\",\n});\n\nconst StepContentHeigth = styled(Grid)({\n  height: \"80vh\",\n  overflowY: \"auto\",\n});\n\nconst ContentContainer = styled(Grid)({\n  height: \"inherit\",\n  alignItems: \"center\",\n  display: \"flex\",\n});\n\nconst IndicatorValue = styled(Paper)(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  position: \"absolute\",\n  top: 0,\n  width: \"100%\",\n  height: \"100%\",\n  margin: \"0 auto\",\n  fontSize: 25,\n  color: theme.palette.text.secondary,\n  userSelect: \"none\",\n  boxShadow: \"none\",\n  background: \"inherit\",\n  fontFamily: \"Roboto Mono\",\n}));\n\nconst ProgressContainer = styled(Grid)({\n  borderRight: \"2px solid #3D3D3D\",\n});\n\nexport const DAOCreate: React.FC = () => {\n  const creator = useContext(CreatorContext);\n  // const tezos = useContext(TezosContext);\n  \n  const { activeStep, governanceStep, back, next } = creator.state;\n  const progress = useMemo(() => activeStep * 25, [activeStep]);\n\n\n  return (\n    <PageContainer container direction=\"row\">\n      <ProgressContainer\n        item\n        xs={3}\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n        direction=\"column\"\n      >\n        <ProgressBar\n          progress={progress}\n          radius={62}\n          strokeWidth={4}\n          strokeColor={\"#81FEB7\"}\n          trackStrokeWidth={2}\n          trackStrokeColor={\"#3d3d3d\"}\n        >\n          <Box className=\"indicator\">\n            <IndicatorValue>\n              {progress === 0.5 ? 0 : activeStep * 25}%\n            </IndicatorValue>\n          </Box>\n        </ProgressBar>\n        <StyledStepper activeStep={activeStep} orientation=\"vertical\">\n          {STEPS.map(({ title }: StepInfo) => (\n            <Step key={title} {...(!true && { active: false })}>\n              <StepLabel>{title}</StepLabel>\n            </Step>\n          ))}\n        </StyledStepper>\n      </ProgressContainer>\n\n      <StepContentHeigth item xs={9} container>\n        <ContentContainer item xs={11}>\n          {true ? (\n            <StepContentContainer item container justify=\"center\">\n              <CurrentStep\n                governanceStep={governanceStep}\n                activeStep={activeStep}\n              />\n            </StepContentContainer>\n          ) : (\n            <StepOneContentContainer item container justify=\"center\">\n              <ConnectWallet />\n            </StepOneContentContainer>\n          )}\n        </ContentContainer>\n      </StepContentHeigth>\n      {activeStep < 4 && <NavigationBar back={back} next={next} />}\n    </PageContainer>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/utils.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/state/types.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/beacon/hooks/useTezos.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/Treasury.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/Proposals.tsx",["340","341","342","343","344","345","346","347","348","349"],"import {\n  Box,\n  Grid,\n  styled,\n  Typography,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport React, { useMemo } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { NewProposalDialog } from \"../components/NewProposalDialog\";\nimport {\n  ProposalTableRowData,\n  ProposalTableRow,\n  mapProposalData,\n} from \"../components/ProposalTableRow\";\nimport { SideBar } from \"../components/SideBar\";\nimport { useDAO } from \"../../../services/contracts/baseDAO/hooks/useDAO\";\nimport { useProposals } from \"../../../services/contracts/baseDAO/hooks/useProposals\";\nimport { ProposalStatus } from \"../../../services/bakingBad/proposals/types\";\n\nconst StyledContainer = styled(Grid)(({ theme }) => ({\n  background: theme.palette.primary.main,\n  height: 184,\n  paddingTop: \"4%\",\n  boxSizing: \"border-box\",\n}));\n\nconst JustifyEndGrid = styled(Grid)({\n  textAlign: \"end\",\n});\n\nconst PageLayout = styled(Grid)(({ theme }) => ({\n  background: theme.palette.primary.main,\n  minHeight: \"calc(100vh - 102px)\",\n}));\n\nconst MainContainer = styled(Grid)({\n  paddingBottom: 0,\n  padding: \"40px 112px\",\n  borderBottom: \"2px solid #3D3D3D\",\n});\n\nconst StatsBox = styled(Grid)({\n  borderRight: \"2px solid #3D3D3D\",\n  width: \"unset\",\n  \"&:last-child\": {\n    borderRight: \"none\",\n  },\n});\n\nconst StatsContainer = styled(Grid)({\n  height: 175,\n  borderBottom: \"2px solid #3D3D3D\",\n});\n\nconst TokensLocked = styled(StatsBox)({\n  padding: \"0 50px 0 112px\",\n});\n\nconst LockedTokensBar = styled(LinearProgress)({\n  width: \"100%\",\n  \"&.MuiLinearProgress-colorSecondary\": {\n    background: \"#3D3D3D\",\n  },\n});\n\nconst VotingAddresses = styled(StatsBox)({\n  minWidth: 250,\n});\n\nconst ActiveProposals = styled(StatsBox)({\n  paddingLeft: \"42px\",\n});\n\nconst TableContainer = styled(Box)({\n  width: \"100%\",\n  padding: \"72px 112px\",\n  paddingBottom: 30,\n  boxSizing: \"border-box\",\n});\n\nconst TableHeader = styled(Grid)({\n  borderBottom: \"2px solid #3D3D3D\",\n  paddingBottom: 20,\n});\n\nconst ProposalsContainer = styled(Grid)({\n  paddingBottom: 72,\n});\n\nconst UnderlineText = styled(Typography)({\n  textDecoration: \"underline\",\n  cursor: \"pointer\",\n});\n\nconst ProposalTableHeadText: React.FC = ({ children }) => (\n  <Typography variant=\"subtitle1\" color=\"textSecondary\">\n    {children}\n  </Typography>\n);\n\nexport const Proposals: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const { data: dao, error: daoError, isLoading: daoLoading } = useDAO(id);\n\n  const name = dao && dao.unfrozenToken.name;\n  const description = dao && dao.description;\n  const symbol = dao && dao.unfrozenToken.symbol.toUpperCase();\n  const quorumTreshold = dao && dao.quorumTreshold;\n  const amountLocked = useMemo(() => {\n    if (!dao) {\n      return 0;\n    }\n\n    return dao.ledger.reduce((acc, current) => {\n      const frozenBalance = current.balances[1] || 0;\n      return acc + frozenBalance;\n    }, 0);\n  }, [dao]);\n\n  const addressesWithUnfrozenBalance = useMemo(() => {\n    if (!dao) {\n      return 0;\n    }\n\n    return dao.ledger.reduce((acc, current) => {\n      const frozenBalance = current.balances[0];\n      if (frozenBalance) {\n        return acc + 1;\n      }\n\n      return acc;\n    }, 0);\n  }, [dao]);\n\n  const { data: proposalsData, isLoading, error } = useProposals(\n    dao && dao.address\n  );\n\n  const activeProposals = useMemo<ProposalTableRowData[]>(() => {\n    if (!proposalsData) {\n      return [];\n    }\n\n    return proposalsData\n      .filter((proposalData) => proposalData.status === ProposalStatus.ACTIVE)\n      .map((proposal) => mapProposalData(proposal, dao?.address));\n  }, [proposalsData]);\n\n  const passedProposals = useMemo<ProposalTableRowData[]>(() => {\n    if (!proposalsData) {\n      return [];\n    }\n\n    return proposalsData\n      .filter((proposalData) => proposalData.status === ProposalStatus.PASSED)\n      .map((proposal) => mapProposalData(proposal, dao?.address));\n  }, [proposalsData]);\n\n  const allProposals = useMemo(() => {\n    if (!proposalsData) {\n      return [];\n    }\n\n    return proposalsData.map((proposal) => mapProposalData(proposal, dao?.address));\n  }, [proposalsData]);\n\n  return (\n    <>\n      <PageLayout container wrap=\"nowrap\">\n        <SideBar />\n        <Grid item xs>\n          <MainContainer>\n            <StyledContainer container direction=\"row\">\n              <Grid item xs={6}>\n                <Typography variant=\"subtitle1\" color=\"secondary\">\n                  {name}\n                </Typography>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                  Proposals\n                </Typography>\n              </Grid>\n              <JustifyEndGrid item xs={6}>\n                <NewProposalDialog />\n              </JustifyEndGrid>\n            </StyledContainer>\n          </MainContainer>\n          <StatsContainer container>\n            <TokensLocked\n              item\n              xs={6}\n              container\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n            >\n              <Grid container justify=\"space-between\" alignItems=\"center\">\n                <Grid item>\n                  <Box>\n                    <Typography variant=\"subtitle2\" color=\"secondary\">\n                      {symbol} Locked\n                    </Typography>\n                  </Box>\n                  <Box padding=\"12px 0\">\n                    <Typography variant=\"h3\" color=\"textSecondary\">\n                      {amountLocked}\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"subtitle2\" color=\"secondary\">\n                    View\n                  </Typography>\n                </Grid>\n              </Grid>\n              <LockedTokensBar\n                variant=\"determinate\"\n                value={60}\n                color=\"secondary\"\n              />\n            </TokensLocked>\n            <VotingAddresses\n              item\n              container\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n            >\n              <Box>\n                <Typography variant=\"subtitle2\" color=\"secondary\">\n                  Voting Addresses\n                </Typography>\n                <Typography variant=\"h3\" color=\"textSecondary\">\n                  {addressesWithUnfrozenBalance}\n                </Typography>\n              </Box>\n            </VotingAddresses>\n            <ActiveProposals\n              item\n              xs\n              container\n              direction=\"column\"\n              justify=\"center\"\n            >\n              <Box>\n                <Typography variant=\"subtitle2\" color=\"secondary\">\n                  Active Proposals\n                </Typography>\n                <Typography variant=\"h3\" color=\"textSecondary\">\n                  {activeProposals?.length}\n                </Typography>\n              </Box>\n            </ActiveProposals>\n          </StatsContainer>\n          <TableContainer>\n            <TableHeader container wrap=\"nowrap\">\n              <Grid item xs={5}>\n                <ProposalTableHeadText>ACTIVE PROPOSALS</ProposalTableHeadText>\n              </Grid>\n              <Grid item xs={2}>\n                <ProposalTableHeadText>CYCLE</ProposalTableHeadText>\n              </Grid>\n              <Grid item xs={5}>\n                <ProposalTableHeadText>{\"\"}</ProposalTableHeadText>\n              </Grid>\n            </TableHeader>\n            {activeProposals.map((proposal, i) => (\n              <ProposalTableRow key={`proposal-${i}`} {...proposal} />\n            ))}\n          </TableContainer>\n          <ProposalsContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <UnderlineText\n              color=\"textSecondary\"\n              variant=\"subtitle1\"\n              align=\"center\"\n            >\n              LOAD MORE\n            </UnderlineText>\n          </ProposalsContainer>\n\n          <TableContainer>\n            <TableHeader container wrap=\"nowrap\">\n              <Grid item xs={5}>\n                <ProposalTableHeadText>PASSED PROPOSALS</ProposalTableHeadText>\n              </Grid>\n              <Grid item xs={2}>\n                <ProposalTableHeadText>{\"\"}</ProposalTableHeadText>\n              </Grid>\n              <Grid item xs={5}>\n                <ProposalTableHeadText>{\"\"}</ProposalTableHeadText>\n              </Grid>\n            </TableHeader>\n            {passedProposals.map((proposal, i) => (\n              <ProposalTableRow key={`proposal-${i}`} {...proposal} />\n            ))}\n          </TableContainer>\n\n          <TableContainer>\n            <TableHeader container wrap=\"nowrap\">\n              <Grid item xs={5}>\n                <ProposalTableHeadText>ALL PROPOSALS</ProposalTableHeadText>\n              </Grid>\n              <Grid item xs={2}>\n                <ProposalTableHeadText>{\"\"}</ProposalTableHeadText>\n              </Grid>\n              <Grid item xs={5}>\n                <ProposalTableHeadText>{\"\"}</ProposalTableHeadText>\n              </Grid>\n            </TableHeader>\n            {allProposals.map((proposal, i) => (\n              <ProposalTableRow key={`proposal-${i}`} {...proposal} />\n            ))}\n          </TableContainer>\n        </Grid>\n      </PageLayout>\n    </>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/DAO.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/Voting.tsx",["350","351","352","353","354","355","356","357","358","359"],"import {\n  Box,\n  Grid,\n  styled,\n  Typography,\n  withTheme,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { useDAO } from \"../../../services/contracts/baseDAO/hooks/useDAO\";\nimport { useProposal } from \"../../../services/contracts/baseDAO/hooks/useProposal\";\nimport { SideBar } from \"../components/SideBar\";\nimport { VoteDialog } from \"../components/VoteDialog\";\n\nconst StyledContainer = styled(withTheme(Grid))((props) => ({\n  background: props.theme.palette.primary.main,\n  minHeight: 184,\n  boxSizing: \"border-box\",\n}));\n\nconst JustifyEndGrid = styled(Grid)({\n  textAlign: \"end\",\n});\n\nconst PageLayout = styled(Grid)(({ theme }) => ({\n  background: theme.palette.primary.main,\n  minHeight: \"calc(100vh - 102px)\",\n}));\n\nconst MainContainer = styled(Grid)({\n  padding: \"40px 112px\",\n  borderBottom: \"2px solid #3D3D3D\",\n  paddingBottom: \"4vh\",\n});\n\nconst DetailsContainer = styled(Grid)({\n  paddingBottom: 0,\n  padding: \"40px 112px\",\n});\n\nconst CycleContainer = styled(Grid)({\n  padding: \"20px 112px\",\n  borderBottom: \"2px solid #3D3D3D\",\n});\n\nconst StatsBox = styled(Grid)({\n  borderRight: \"2px solid #3D3D3D\",\n  width: \"unset\",\n  \"&:last-child\": {\n    borderRight: \"none\",\n  },\n});\n\nconst StatsContainer = styled(Grid)({\n  height: 175,\n  borderBottom: \"2px solid #3D3D3D\",\n});\n\nconst TokensLocked = styled(StatsBox)({\n  padding: \"0 50px 0 112px\",\n});\n\nconst LockedTokensBar = styled(LinearProgress)({\n  width: \"100%\",\n  \"&.MuiLinearProgress-colorSecondary\": {\n    background: \"#3D3D3D\",\n  },\n});\n\nconst LockedTokensAgainstBar = styled(LinearProgress)({\n  width: \"100%\",\n  \"&.MuiLinearProgress-colorSecondary\": {\n    background: \"#3D3D3D\",\n    color: \"#ED254E\",\n    \"& .MuiLinearProgress-bar\": {\n      backgroundColor: \"#ED254E !important\",\n    },\n  },\n  \"& .MuiLinearProgress-bar\": {\n    backgroundColor: \"#ED254E !important\",\n  },\n});\n\nconst TextAgainst = styled(Typography)({\n  color: \"#ED254E !important\",\n});\n\nconst Container = styled(Grid)({\n  paddingTop: \"4%\",\n});\n\nconst Subtitle = styled(Typography)({\n  marginTop: 12,\n});\n\nconst ButtonsContainer = styled(Grid)({\n  marginTop: \"6%\",\n});\n\nconst Cycle = styled(Typography)({\n  opacity: 0.8,\n});\n\nconst BoxItem = styled(Grid)({\n  paddingBottom: 24,\n  borderBottom: \"2px solid #3D3D3D\",\n});\n\nconst Detail = styled(Grid)({\n  height: 93,\n  display: \"flex\",\n  alignItems: \"center\",\n  paddingBottom: 0,\n  borderBottom: \"2px solid #3D3D3D\",\n});\n\nconst MetaData = styled(Grid)({\n  height: 70,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  marginBottom: 20,\n});\n\nconst HistoryContent = styled(Grid)({\n  paddingBottom: 24,\n  paddingLeft: 53,\n});\n\nconst HistoryItem = styled(Grid)({\n  paddingLeft: 63,\n  marginTop: 20,\n  paddingBottom: 12,\n  display: \"flex\",\n  height: \"auto\",\n});\n\nconst HistoryBadge = styled(Grid)({\n  borderRadius: 4,\n  textAlign: \"center\",\n});\n\nconst styles = {\n  blue: {\n    background: \"#3866F9\",\n    color: \"white\",\n    padding: 2,\n  },\n  yellow: {\n    background: \"#DBDE39\",\n    color: \"#1C1F23\",\n    padding: 2,\n  },\n};\n\nconst Details = [\n  {\n    message: \"Reduces DAO’s Treasury by 50ETH\",\n  },\n  {\n    message: \"Increases 0x89878 wallet by 50ETH\",\n  },\n  {\n    message: \"Reduces DAO’s Treasury by 50ETH\",\n  },\n];\n\nconst History = [\n  {\n    date: \"December 19th, 2020. 11:09:21 AM\",\n    status: \"created\",\n  },\n  {\n    date: \"December 20th, 2020. 11:09:21 AM\",\n    status: \"active\",\n  },\n  {\n    date: \"December 21st, 2020. 11:09:21 AM\",\n    status: \"passed\",\n  },\n];\n\nexport const Voting: React.FC = () => {\n  const { proposalId, id: daoId } = useParams<{\n    proposalId: string;\n    id: string;\n  }>();\n\n  const proposal = useProposal(daoId, proposalId);\n  const { data: dao } = useDAO(daoId);\n\n  const proposalCycle = proposal ? proposal.cycle : \"-\";\n  const upVotes = proposal ? proposal.upVotes : 0;\n  const downVotes = proposal ? proposal.downVotes : 0;\n  const daoName = dao ? dao.unfrozenToken.name : \"\";\n  const totalVotes = upVotes + downVotes;\n  const upVotesPercentage = totalVotes && (upVotes * 100) / totalVotes;\n  const downVotesPercentage = totalVotes && (downVotes * 100) / totalVotes;\n\n  return (\n    <>\n      <PageLayout container wrap=\"nowrap\">\n        <SideBar />\n        <Grid item xs>\n          <MainContainer>\n            <Container container direction=\"row\">\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle1\" color=\"secondary\">\n                  {daoName} &gt; PROPOSALS\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <StyledContainer container direction=\"row\">\n                  <Grid item xs={6}>\n                    <Subtitle variant=\"h3\" color=\"textSecondary\">\n                      Proposal Title\n                    </Subtitle>\n                    <Subtitle color=\"textSecondary\">\n                      Proposal Description\n                    </Subtitle>\n                  </Grid>\n                  <JustifyEndGrid item xs={6}>\n                    <ButtonsContainer\n                      container\n                      direction=\"row\"\n                      alignItems=\"center\"\n                      justify=\"flex-end\"\n                    >\n                      <VoteDialog />\n                    </ButtonsContainer>\n                  </JustifyEndGrid>\n                </StyledContainer>\n              </Grid>\n            </Container>\n          </MainContainer>\n          <CycleContainer container direction=\"row\">\n            <Cycle color=\"textSecondary\">\n              CYCLE: {proposalCycle} POSITION: -\n            </Cycle>\n          </CycleContainer>\n          <StatsContainer container>\n            <TokensLocked\n              item\n              xs={6}\n              container\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n            >\n              <Grid container justify=\"space-between\" alignItems=\"center\">\n                <Grid item>\n                  <Box>\n                    <Typography variant=\"subtitle2\" color=\"secondary\">\n                      FOR\n                    </Typography>\n                  </Box>\n                  <Box padding=\"12px 0\">\n                    <Typography variant=\"h3\" color=\"textSecondary\">\n                      {upVotes}\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"subtitle2\" color=\"secondary\">\n                    VIEW ADDRESSES\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item xs={10}>\n                  <LockedTokensBar\n                    variant=\"determinate\"\n                    value={upVotesPercentage}\n                    color=\"secondary\"\n                  />\n                </Grid>\n                <Grid item xs={2}>\n                  <Typography color=\"textSecondary\" align=\"right\">\n                    {upVotesPercentage}%\n                  </Typography>\n                </Grid>\n              </Grid>\n            </TokensLocked>\n\n            <TokensLocked\n              item\n              xs={6}\n              container\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n            >\n              <Grid container justify=\"space-between\" alignItems=\"center\">\n                <Grid item>\n                  <Box>\n                    <TextAgainst variant=\"subtitle2\">OPPOSE</TextAgainst>\n                  </Box>\n                  <Box padding=\"12px 0\">\n                    <Typography variant=\"h3\" color=\"textSecondary\">\n                      {downVotes}\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item>\n                  <TextAgainst variant=\"subtitle2\" color=\"secondary\">\n                    VIEW ADDRESSES\n                  </TextAgainst>\n                </Grid>\n              </Grid>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item xs={10}>\n                  <LockedTokensAgainstBar\n                    variant=\"determinate\"\n                    value={downVotesPercentage}\n                  />\n                </Grid>\n                <Grid item xs={2}>\n                  <Typography color=\"textSecondary\" align=\"right\">\n                    {downVotesPercentage}%\n                  </Typography>\n                </Grid>\n              </Grid>\n            </TokensLocked>\n          </StatsContainer>\n          {/* <DetailsContainer container direction=\"row\">\n            <Grid item xs={6}>\n              <Grid container direction=\"row\">\n                <BoxItem item xs={12}>\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    DETAILS\n                  </Typography>\n                </BoxItem>\n\n                {Details.map((item: any, index: any) => {\n                  return (\n                    <Detail item xs={12} key={index}>\n                      <Grid container direction=\"row\">\n                        <Grid item xs={2}>\n                          <Typography\n                            variant=\"subtitle1\"\n                            color=\"textSecondary\"\n                            align=\"center\"\n                          >\n                            {index + 1}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={10}>\n                          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                            {item.message}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </Detail>\n                  );\n                })}\n\n                <MetaData item xs={12}>\n                  <Typography\n                    variant=\"subtitle1\"\n                    color=\"textSecondary\"\n                    align=\"center\"\n                  >\n                    Proposal Metadata & #\n                  </Typography>\n                </MetaData>\n              </Grid>\n            </Grid>\n            <Grid item xs={6}>\n              <Grid container direction=\"row\">\n                <HistoryContent item xs={12}>\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    HISTORY\n                  </Typography>\n                </HistoryContent>\n                {History.map((item: any, index: any) => {\n                  return (\n                    <HistoryItem container direction=\"row\" key={index}>\n                      <HistoryBadge\n                        item\n                        lg={2}\n                        md={6}\n                        sm={6}\n                        style={\n                          item.status === \"active\" ? styles.yellow : styles.blue\n                        }\n                      >\n                        <Typography> {item.status.toUpperCase()} </Typography>\n                      </HistoryBadge>\n                      <Grid item lg={1} md={1} sm={1}></Grid>\n                      <Grid item lg={9} md={12} sm={12}>\n                        <Typography color=\"textSecondary\">\n                          {item.date}\n                        </Typography>\n                      </Grid>\n                    </HistoryItem>\n                  );\n                })}\n              </Grid>\n            </Grid>\n          </DetailsContainer> */}\n        </Grid>\n      </PageLayout>\n    </>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/types.ts",["360"],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/pages/List.tsx",["361","362","363","364"],"import {\n  Box,\n  Button,\n  Grid,\n  styled,\n  Typography,\n  withTheme,\n} from \"@material-ui/core\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { SearchInput } from \"../components/SearchInput\";\nimport { useDAOs } from \"../../../services/contracts/baseDAO/hooks/useDAOs\";\nimport { MockDAOs } from \"../../../store/mock/mock\";\nimport { addNewContractToIPFS } from \"../../../services/pinata\";\n\nconst GridContainer = styled(Grid)({\n  paddingRight: \"6%\",\n  paddingLeft: \"6%\",\n  paddingTop: \"4%\",\n  marginBottom: 60,\n  background: \"inherit\",\n});\n\nconst StyledButton = styled(Button)({\n  height: 69,\n});\n\nconst TotalDao = styled(Typography)({\n  marginRight: 37,\n  lineHeight: \"124.3%\",\n  letterSpacing: \"-0.01em\",\n});\n\nconst DaoContainer = styled(withTheme(Grid))((props) => ({\n  height: 179,\n  border: \"2px solid #3D3D3D\",\n  boxSizing: \"border-box\",\n  background: props.theme.palette.primary.main,\n  boxShadow: \"none\",\n  borderRadius: 0,\n  paddingTop: 42,\n  borderTop: \"none\",\n  \"&:nth-child(odd)\": {\n    borderLeft: \"none\",\n    paddingLeft: \"6%\",\n  },\n  \"&:nth-child(even)\": {\n    borderRight: \"none\",\n    borderLeft: \"none\",\n    paddingLeft: \"3%\",\n    paddingRight: \"6%\",\n  },\n  \"&:hover\": {\n    background: \"rgba(129, 254, 183, 0.03)\",\n    borderLeft: \"2px solid #81FEB7\",\n    cursor: \"pointer\",\n  },\n}));\n\nconst GridBackground = styled(Grid)({\n  background: \"inherit\",\n  borderTop: \"2px solid #3D3D3D\",\n});\n\nexport const DAOsList: React.FC = () => {\n  const [searchText, setSearchText] = useState(\"\");\n  const { data: daos, error, isLoading } = useDAOs();\n\n  console.log(daos, error, isLoading)\n\n  const currentDAOs = useMemo(() => {\n    if (daos) {\n      const formattedDAOs = daos.map((dao) => ({\n        id: dao.address,\n        name: dao.unfrozenToken.name,\n        symbol: dao.unfrozenToken.symbol,\n        voting_addresses: dao.ledger.length,\n      }));\n\n      if (searchText) {\n        return formattedDAOs.filter(\n          (formattedDao) =>\n            formattedDao.name\n              .toLowerCase()\n              .includes(searchText.toLowerCase()) ||\n            formattedDao.symbol.toLowerCase().includes(searchText.toLowerCase())\n        );\n      }\n\n      return formattedDAOs;\n    }\n\n    return [];\n  }, [daos, searchText]);\n\n  const history = useHistory();\n\n  const filterDAOs = (filter: string) => {\n    setSearchText(filter.trim());\n  };\n\n  // useEffect(() => {\n  //   (async () => {\n  //     await addNewContractToIPFS(\"KT1FvSHdoD6gJX6LgMJRJ1Fr7bXpGLLv6xEP\");\n  //   })();\n  // }, []);\n\n  return (\n    <Box bgcolor=\"primary.main\" width=\"100%\" height=\"100%\">\n      <GridContainer container direction=\"row\" alignItems=\"center\">\n        <Grid item xs={6}>\n          <SearchInput search={filterDAOs} />\n        </Grid>\n        <Grid\n          container\n          item\n          direction=\"row\"\n          justify=\"flex-end\"\n          alignItems=\"center\"\n          alignContent=\"center\"\n          xs={6}\n        >\n          <TotalDao color=\"textSecondary\" variant=\"subtitle1\">\n            {currentDAOs.length} DAOs\n          </TotalDao>\n          <StyledButton\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={() => history.push(\"/creator\")}\n          >\n            Create DAO\n          </StyledButton>\n        </Grid>\n      </GridContainer>\n      <GridBackground container direction=\"row\">\n        {currentDAOs.map((dao: any) => {\n          return (\n            <DaoContainer\n              item\n              xs={12}\n              sm={6}\n              key={dao.symbol}\n              onClick={() => history.push(`/explorer/dao/${dao.id}`)}\n            >\n              <Typography variant=\"subtitle1\" color=\"secondary\">\n                {dao.symbol}\n              </Typography>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"h5\" color=\"textSecondary\">\n                    {dao.name}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    {dao.voting_addresses} VOTING ADDRESSES\n                  </Typography>\n                </Grid>\n              </Grid>\n            </DaoContainer>\n          );\n        })}\n      </GridBackground>\n    </Box>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/store/daos/action.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/store/wallet/action.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/store/funds/action.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/store/mock/mock.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/components/NavigationBar.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/components/ConnectWallet.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/SideBar.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/ProposalTableRow.tsx",["365","366","367","368"],"import React, { useMemo } from \"react\";\nimport {\n  styled,\n  Grid,\n  Box,\n  Typography,\n  IconButton,\n  Link,\n} from \"@material-ui/core\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\nimport { useHistory } from \"react-router-dom\";\nimport ProgressBar from \"react-customizable-progressbar\";\nimport dayjs from \"dayjs\";\nimport { toShortAddress } from \"../../../utils\";\nimport {\n  Proposal,\n  ProposalWithStatus,\n} from \"../../../services/bakingBad/proposals/types\";\n\ntype ProgressColor = \"success\" | \"warning\" | \"danger\";\n\nconst progressColorMap = {\n  success: \"#81FEB7\",\n  warning: \"#DBDE39\",\n  danger: \"#DE3939\",\n};\n\nconst ProposalTableRowContainer = styled(Grid)({\n  height: 155,\n  borderBottom: \"2px solid #3D3D3D\",\n  cursor: \"pointer\",\n});\n\nexport interface ProposalTableRowData {\n  title: string;\n  number: number;\n  date: string;\n  cycle: number;\n  votes: {\n    value: number;\n    support: boolean;\n  };\n  daoId?: string;\n  id: string;\n}\n\nconst SupportText = styled(Typography)(\n  ({ textColor }: { textColor: string }) => ({\n    paddingLeft: 20,\n    color: textColor,\n  })\n);\n\nconst ProgressText = styled(Typography)(\n  ({ textColor }: { textColor: string }) => ({\n    paddingLeft: 20,\n    color: textColor,\n    display: \"flex\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    top: 0,\n    width: \"100%\",\n    height: \"100%\",\n    margin: \"0px 20px\",\n    fontSize: 16,\n    userSelect: \"none\",\n    boxShadow: \"none\",\n    background: \"inherit\",\n    fontFamily: \"Roboto Mono\",\n  })\n);\n\nconst ArrowButton = styled(IconButton)({\n  color: \"#3D3D3D\",\n});\n\nexport const mapProposalData = (\n  proposalData: ProposalWithStatus,\n  daoId?: string\n): ProposalTableRowData => {\n  const votes =\n    proposalData.upVotes >= proposalData.downVotes\n      ? {\n          value: Number(proposalData.upVotes),\n          support: true,\n        }\n      : {\n          value: Number(proposalData.downVotes),\n          support: false,\n        };\n  return {\n    title: proposalData.id,\n    number: Number(proposalData.agoraPostId),\n    date: proposalData.startDate,\n    votes,\n    cycle: proposalData.cycle,\n    daoId,\n    id: proposalData.id,\n  };\n};\n\nexport const ProposalTableRow: React.FC<ProposalTableRowData> = ({\n  title,\n  number,\n  date,\n  votes: { value, support },\n  cycle,\n  daoId,\n  id\n}) => {\n  const history = useHistory();\n  const color = support ? \"success\" : \"danger\";\n  const formattedDate = dayjs(date).format(\"MM/DD/YYYY\");\n\n  return (\n    <ProposalTableRowContainer\n      item\n      container\n      alignItems=\"center\"\n      onClick={() => history.push(`/explorer/dao/${daoId}/proposal/${id}`)}\n    >\n      <Grid item xs={5}>\n        <Box>\n          <Link href={`https://forum.tezosagora.org/t/${number}`}>\n            <Typography variant=\"body1\" color=\"textSecondary\">\n              {toShortAddress(title)}\n            </Typography>\n          </Link>\n        </Box>\n        <Box>\n          <Typography variant=\"body1\" color=\"textSecondary\">\n            #{number} • {formattedDate}\n          </Typography>\n        </Box>\n      </Grid>\n      <Grid item xs={2}>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          {cycle || \"-\"}\n        </Typography>\n      </Grid>\n      <Grid item xs={5} container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <ProgressBar\n                progress={value}\n                radius={32}\n                strokeWidth={4}\n                strokeColor={progressColorMap[color]}\n                trackStrokeWidth={2}\n                trackStrokeColor={\"#3d3d3d\"}\n              >\n                <div className=\"indicator\">\n                  <ProgressText textColor={progressColorMap[color]}>\n                    {value}%\n                  </ProgressText>\n                </div>\n              </ProgressBar>\n            </Grid>\n            <Grid item>\n              <SupportText textColor={progressColorMap[color]}>\n                {color === \"danger\" ? \"OPPOSE\" : \"SUPPORT\"}\n              </SupportText>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ArrowButton>\n            <ArrowForwardIcon fontSize={\"large\"} color=\"inherit\" />\n          </ArrowButton>\n        </Grid>\n      </Grid>\n    </ProposalTableRowContainer>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/Header.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/NewProposalDialog.tsx",["369"],"import React, { useMemo } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport {\n  Grid,\n  styled,\n  Switch,\n  Typography,\n  withTheme,\n  Paper,\n} from \"@material-ui/core\";\nimport { Formik, Form, Field, FieldArray } from \"formik\";\nimport { TextField } from \"formik-material-ui\";\nimport { usePropose } from \"../../../services/contracts/baseDAO/hooks/usePropose\";\nimport { useDAO } from \"../../../services/contracts/baseDAO/hooks/useDAO\";\nimport { useParams } from \"react-router\";\nimport { useVote } from \"../../../services/contracts/baseDAO/hooks/useVote\";\n\nconst StyledButton = styled(withTheme(Button))((props) => ({\n  height: 53,\n  color: props.theme.palette.text.secondary,\n  borderColor: props.theme.palette.secondary.main,\n  minWidth: 171,\n}));\n\nconst CloseButton = styled(Typography)({\n  fontWeight: 900,\n  cursor: \"pointer\",\n});\n\nconst Title = styled(DialogTitle)({\n  borderBottom: \"2px solid #3D3D3D\",\n  height: 30,\n  paddingTop: 28,\n  minWidth: 500,\n});\n\nconst ListItem = styled(Grid)({\n  height: 70,\n  display: \"flex\",\n  alignItems: \"center\",\n  borderBottom: \"2px solid #3D3D3D\",\n  padding: \"0px 24px\",\n});\n\nconst SendContainer = styled(Grid)({\n  height: 55,\n});\n\nconst BatchBar = styled(Grid)({\n  height: 55,\n  display: \"flex\",\n  alignItems: \"center\",\n  borderBottom: \"2px solid #3D3D3D\",\n  padding: \"0px 24px\",\n  cursor: \"pointer\",\n});\n\nconst SwitchContainer = styled(Grid)({\n  textAlign: \"end\",\n});\n\nconst TransferActive = styled(Grid)({\n  height: 53,\n  width: 51,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n});\n\nconst AddButton = styled(Paper)({\n  marginLeft: 12,\n  height: 31,\n  width: 31,\n  textAlign: \"center\",\n  padding: 0,\n  background: \"#383939\",\n  color: \"#fff\",\n  alignItems: \"center\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  cursor: \"pointer\",\n});\n\nconst styles = {\n  visible: {\n    display: \"none\",\n  },\n  active: {\n    background: \"#3866F9\",\n  },\n};\n\nconst DescriptionContainer = styled(Grid)({\n  minHeight: 250,\n  paddingLeft: 24,\n  paddingRight: 24,\n  paddingTop: 24,\n  borderBottom: \"2px solid #3D3D3D\",\n});\n\nconst CustomTextField = styled(TextField)({\n  textAlign: \"end\",\n  \"& .MuiInputBase-input\": {\n    textAlign: \"end\",\n    paddingRight: 12,\n  },\n});\n\nconst CustomTextarea = styled(TextField)({\n  textAlign: \"end\",\n  \"& .MuiInputBase-multiline\": {\n    textAlign: \"initial\",\n    border: \"1px solid #434242\",\n    boxSizing: \"border-box\",\n    \"& .MuiInputBase-inputMultiline\": {\n      padding: 12,\n      textAlign: \"initial\",\n    },\n  },\n});\n\ninterface Transfer {\n  recipient: string;\n  amount: 0;\n}\n\ninterface Values {\n  transfers: Transfer[];\n  description: string;\n  agoraPostId: number;\n}\n\nconst PROPOSAL_SIZE = 1;\nconst EMPTY_TRANSFER: Transfer = { recipient: \"\", amount: 0 };\nconst INITIAL_FORM_VALUES: Values = {\n  transfers: [EMPTY_TRANSFER],\n  description: \"\",\n  agoraPostId: 0,\n};\n\nexport const NewProposalDialog: React.FC = () => {\n  const [open, setOpen] = React.useState(false);\n  const [isBatch, setIsBatch] = React.useState(false);\n  const [activeTransfer, setActiveTransfer] = React.useState(1);\n  const { mutate } = usePropose();\n  const { id } = useParams<{ id: string }>();\n  const { data: dao } = useDAO(id);\n  const { mutate: vote, data: voteData, error: voteError } = useVote();\n\n  const proposalFee = useMemo(() => {\n    //TODO: redo calculation when PACK ed size gets figured out\n    return dao ? dao.frozenExtraValue : 0;\n  }, [dao]);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onSubmit = (values: Values, { setSubmitting }: any) => {\n    setSubmitting(true);\n    if (dao) {\n      mutate({\n        contractAddress: dao.address,\n        contractParams: {\n          transfers: values.transfers,\n          tokensToFreeze: proposalFee,\n          agoraPostId: values.agoraPostId,\n        },\n      });\n    }\n  };\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"outlined\"\n        onClick={handleClickOpen}\n        disabled={!dao}\n      >\n        NEW PROPOSAL\n      </StyledButton>\n      <Button\n        onClick={() => {\n          console.log(voteData, voteError);\n\n          vote({\n            contractAddress: \"KT1FvSHdoD6gJX6LgMJRJ1Fr7bXpGLLv6xEP\",\n            amount: 1,\n            proposalKey:\n              \"70674a2002903eebc7f5780be6a1efa2eed3c619f4eb07be75f4a792a381f8fa\",\n            support: true,\n          });\n        }}\n      >\n        VOTE\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <Title id=\"alert-dialog-title\" color=\"textSecondary\">\n          <Grid container direction=\"row\">\n            <Grid item xs={6}>\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                SEND FUNDS\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <CloseButton\n                color=\"textSecondary\"\n                align=\"right\"\n                onClick={handleClose}\n              >\n                X\n              </CloseButton>\n            </Grid>\n          </Grid>\n        </Title>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <ListItem container direction=\"row\">\n              <Grid item xs={6}>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                  Batch Transfer?\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <SwitchContainer item xs={12} justify=\"flex-end\">\n                  <Switch\n                    checked={isBatch}\n                    onChange={() => {\n                      setIsBatch(!isBatch);\n                      return;\n                    }}\n                    name=\"checkedA\"\n                    inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n                  />\n                </SwitchContainer>\n              </Grid>\n            </ListItem>\n\n            <Formik initialValues={INITIAL_FORM_VALUES} onSubmit={onSubmit}>\n              {({ submitForm, values }) => (\n                <Form autoComplete=\"off\">\n                  <>\n                    <FieldArray\n                      name=\"transfers\"\n                      render={(arrayHelpers) => (\n                        <>\n                          {isBatch ? (\n                            <BatchBar container direction=\"row\">\n                              {values.transfers.map((_, index) => {\n                                return (\n                                  <TransferActive\n                                    item\n                                    key={index}\n                                    onClick={() => setActiveTransfer(index + 1)}\n                                    style={\n                                      Number(index + 1) === activeTransfer\n                                        ? styles.active\n                                        : undefined\n                                    }\n                                  >\n                                    <Typography\n                                      variant=\"subtitle1\"\n                                      color=\"textSecondary\"\n                                    >\n                                      #{index + 1}\n                                    </Typography>\n                                  </TransferActive>\n                                );\n                              })}\n\n                              <AddButton\n                                onClick={() => {\n                                  arrayHelpers.insert(\n                                    values.transfers.length + 1,\n                                    EMPTY_TRANSFER\n                                  );\n                                }}\n                              >\n                                +\n                              </AddButton>\n                            </BatchBar>\n                          ) : null}\n\n                          <ListItem container direction=\"row\">\n                            <Grid item xs={6}>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                              >\n                                Recipient\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <SwitchContainer item xs={12} justify=\"flex-end\">\n                                <Field\n                                  name={`transfers.${\n                                    activeTransfer - 1\n                                  }.recipient`}\n                                  type=\"string\"\n                                  placeholder=\"Type an Address Here\"\n                                  component={CustomTextField}\n                                />\n                              </SwitchContainer>\n                            </Grid>\n                          </ListItem>\n\n                          <ListItem container direction=\"row\">\n                            <Grid item xs={6}>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                              >\n                                Amount\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <SwitchContainer item xs={12} justify=\"flex-end\">\n                                <Field\n                                  name={`transfers.${\n                                    activeTransfer - 1\n                                  }.amount`}\n                                  type=\"number\"\n                                  placeholder=\"Type an Amount\"\n                                  component={CustomTextField}\n                                />\n                              </SwitchContainer>\n                            </Grid>\n                          </ListItem>\n                        </>\n                      )}\n                    />\n                    <DescriptionContainer container direction=\"row\">\n                      <Grid item xs={12}>\n                        <Grid\n                          container\n                          direction=\"row\"\n                          alignItems=\"center\"\n                          justify=\"space-between\"\n                        >\n                          <Grid item xs={6}>\n                            <Typography\n                              variant=\"subtitle1\"\n                              color=\"textSecondary\"\n                            >\n                              Proposal Description\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <Typography\n                              align=\"right\"\n                              variant=\"subtitle1\"\n                              color=\"textSecondary\"\n                            >\n                              {values.description\n                                ? values.description.trim().split(\" \").length\n                                : 0}{\" \"}\n                              Words\n                            </Typography>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Field\n                          name=\"description\"\n                          type=\"number\"\n                          multiline\n                          rows={6}\n                          placeholder=\"Type a Description\"\n                          component={CustomTextarea}\n                        />\n                      </Grid>\n                    </DescriptionContainer>\n\n                    <ListItem container direction=\"row\">\n                      <Grid item xs={6}>\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                          Agora Post ID\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <SwitchContainer item xs={12} justify=\"flex-end\">\n                          <Field\n                            name={`agoraPostId`}\n                            type=\"number\"\n                            placeholder=\"Type an Agora Post ID\"\n                            component={CustomTextField}\n                          />\n                        </SwitchContainer>\n                      </Grid>\n                    </ListItem>\n\n                    <ListItem container direction=\"row\">\n                      <Grid item xs={6}>\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                          Proposal Fee\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Typography\n                          align=\"right\"\n                          variant=\"subtitle1\"\n                          color=\"secondary\"\n                        >\n                          {proposalFee} {dao ? dao.unfrozenToken.symbol : \"\"}\n                        </Typography>\n                      </Grid>\n                    </ListItem>\n\n                    <SendContainer container direction=\"row\" justify=\"center\">\n                      <Button onClick={submitForm}>\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                          SEND\n                        </Typography>\n                      </Button>\n                    </SendContainer>\n                  </>\n                </Form>\n              )}\n            </Formik>\n          </DialogContentText>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/TokenHoldersDialog.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/SearchInput.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/beacon/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/index.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/TokenSettings.tsx",["370","371"],"import {\n  Grid,\n  styled,\n  Typography,\n  withStyles,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Field, FieldArray, Form, Formik } from \"formik\";\nimport { TextField as FormikTextField } from \"formik-material-ui\";\n\nimport { CreatorContext } from \"../state/context\";\nimport { ActionTypes, TokenHolder } from \"../state/types\";\nimport { MemberSettings } from \"../../../services/contracts/baseDAO/types\";\n\nconst CustomTypography = styled(Typography)({\n  paddingBottom: 21,\n  borderBottom: \"1px solid #3D3D3D\",\n  marginTop: 10,\n  marginBottom: 14,\n});\n\nconst SecondContainer = styled(Grid)({\n  marginTop: 25,\n});\n\nconst CustomInputContainer = styled(Grid)({\n  border: \"1px solid #3D3D3D\",\n  height: 62,\n  marginTop: 14,\n  padding: \"18px 21px\",\n  boxSizing: \"border-box\",\n  \"&:hover\": {\n    background: \"rgba(129, 254, 183, 0.03)\",\n    borderLeft: \"2px solid #81FEB7\",\n  },\n});\n\nconst CustomBalanceContainer = styled(Grid)({\n  border: \"1px solid #3D3D3D\",\n  height: 62,\n  marginTop: 14,\n  borderLeft: \"none\",\n  padding: \"18px 21px\",\n  boxSizing: \"border-box\",\n  \"&:hover\": {\n    background: \"rgba(129, 254, 183, 0.03)\",\n    borderLeft: \"2px solid #81FEB7\",\n  },\n});\n\nconst ErrorText = styled(Typography)({\n  fontSize: 10,\n  color: \"red\",\n  marginTop: 10,\n});\n\nconst CustomFormikTextField = withStyles({\n  root: {\n    \"& .MuiInput-root\": {\n      fontWeight: 300,\n      textAlign: \"initial\",\n    },\n    \"& .MuiInputBase-input\": {\n      textAlign: \"initial\",\n    },\n    \"& .MuiInput-underline:before\": {\n      borderBottom: \"none !important\",\n    },\n    \"& .MuiInput-underline:hover:before\": {\n      borderBottom: \"none !important\",\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottom: \"none !important\",\n    },\n  },\n})(FormikTextField);\n\nconst CustomTotalContainer = styled(Typography)({\n  padding: \"11px 21px\",\n  boxSizing: \"border-box\",\n});\n\nconst CustomValueContainer = styled(Typography)({\n  padding: \"11px 21px\",\n  boxSizing: \"border-box\",\n  fontWeight: 700,\n});\n\nconst AddButon = styled(\"button\")({\n  background: \"inherit\",\n  border: \"none\",\n  outline: \"none\",\n  marginTop: 8,\n  textAlign: \"end\",\n  width: \"100%\",\n  cursor: \"pointer\",\n  textDecoration: \"underline\",\n  color: \"#fff\",\n});\n\nconst TokenHoldersGrid = styled(Grid)({\n  maxHeight: 269,\n  overflowY: \"auto\",\n});\n\nconst Total = ({ values }: { values: MemberSettings }) => {\n  const totalTokens = values.tokenHolders.reduce(\n    (a: number, b: TokenHolder) => a + b.balance,\n    0\n  );\n  return <div>{isNaN(totalTokens) ? \"0\" : totalTokens}</div>;\n};\n\nconst validate = (values: MemberSettings) => {\n  const handleLedgerValidation = (field: any) => {\n    if (field === \"tokenHolders\") {\n      return !!values[\"tokenHolders\"].length;\n    }\n\n    return !values[field as keyof MemberSettings];\n  };\n\n  // handleErrorMessages(values, handleLedgerValidation);\n};\n\nconst TokenSettingsForm = ({\n  values,\n  submitForm,\n  touched,\n  errors,\n}: { values: MemberSettings } & any) => {\n  const {\n    dispatch,\n    state: { activeStep },\n  } = useContext(CreatorContext);\n\n  useEffect(() => {\n    if (values) {\n      dispatch({\n        type: ActionTypes.UPDATE_NAVIGATION_BAR,\n        next: {\n          text: \"CONTINUE\",\n          handler: () => {\n            submitForm(values);\n          },\n        },\n        back: {\n          text: \"BACK\",\n          handler: () =>\n            dispatch({ type: ActionTypes.UPDATE_STEP, step: activeStep - 1 }),\n        },\n      });\n    }\n  }, [activeStep, dispatch, errors, submitForm, values]);\n\n  //@TODO: Refactor token holder and balance inputs to use same logic\n  return (\n    <>\n      <TokenHoldersGrid container direction=\"row\">\n        <Grid item xs={9}>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            Token holders\n          </Typography>\n\n          <FieldArray\n            name=\"tokenHolders\"\n            render={() => (\n              <>\n                {values.tokenHolders && values.tokenHolders.length > 0 ? (\n                  values.tokenHolders.map((_: string, index: number) => (\n                    <div key={index}>\n                      <CustomInputContainer>\n                        <Field\n                          type=\"text\"\n                          component={CustomFormikTextField}\n                          placeholder=\"tz1PXn....\"\n                          name={`tokenHolders.${index}.address`}\n                        />\n                      </CustomInputContainer>\n                    </div>\n                  ))\n                ) : (\n                  <CustomInputContainer>\n                    <Field\n                      type=\"text\"\n                      component={CustomFormikTextField}\n                      placeholder=\"0xf8s8d....\"\n                      name={`tokenHolders.0.address`}\n                    />\n                    {/* {errors.tokenHolder &&\n                  errors.tokenHolder[index] &&\n                  touched.tokenHolder[index] ? (\n                    <ErrorText>{errors.tokenHolder[index]}</ErrorText>\n                  ) : null} */}\n                  </CustomInputContainer>\n                )}\n              </>\n            )}\n          />\n        </Grid>\n\n        <Grid item xs={3}>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            {\" \"}\n            Balance{\" \"}\n          </Typography>\n\n          <FieldArray\n            name=\"tokenHolders\"\n            render={(arrayHelpers) => (\n              <>\n                {values.tokenHolders && values.tokenHolders.length > 0 ? (\n                  values.tokenHolders.map((_: string, index: number) => (\n                    <div key={index}>\n                      <CustomBalanceContainer>\n                        <Field\n                          type=\"number\"\n                          component={CustomFormikTextField}\n                          placeholder=\"0.00\"\n                          name={`tokenHolders.${index}.balance`}\n                        />\n                      </CustomBalanceContainer>\n                      {index + 1 === values.tokenHolders.length ? (\n                        <AddButon\n                          className=\"button\"\n                          type=\"button\"\n                          onClick={() =>\n                            arrayHelpers.insert(index + 1, {\n                              token_holder: \"\",\n                              balance: 0,\n                            })\n                          }\n                        >\n                          {\" \"}\n                          Add new row\n                        </AddButon>\n                      ) : null}\n                    </div>\n                  ))\n                ) : (\n                  <>\n                    <CustomBalanceContainer>\n                      <Field\n                        type=\"number\"\n                        component={CustomFormikTextField}\n                        placeholder=\"0.00\"\n                        name={`tokenHolders.0.balance`}\n                      />\n                    </CustomBalanceContainer>\n                    <AddButon\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() =>\n                        arrayHelpers.insert(1, {\n                          token_holder: \"\",\n                          balance: 0,\n                        })\n                      }\n                    >\n                      {\" \"}\n                      Add new row\n                    </AddButon>\n                  </>\n                )}\n              </>\n            )}\n          />\n        </Grid>\n      </TokenHoldersGrid>\n\n      <Grid container direction=\"row\">\n        <Grid item xs={9}>\n          <CustomTotalContainer variant=\"subtitle1\" color=\"textSecondary\">\n            {\" \"}\n            Total{\" \"}\n          </CustomTotalContainer>\n        </Grid>\n        <Grid item xs={3}>\n          <CustomValueContainer color=\"textSecondary\">\n            <Total values={values} />\n          </CustomValueContainer>\n        </Grid>\n      </Grid>\n\n      <SecondContainer item container direction=\"row\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            {\" \"}\n            Administrator{\" \"}\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <CustomInputContainer>\n            <Field\n              name=\"administrator\"\n              type=\"text\"\n              placeholder=\"0xf8s8d....\"\n              component={CustomFormikTextField}\n            ></Field>\n          </CustomInputContainer>\n          {errors.administrator && touched.administrator ? (\n            <ErrorText>{errors.administrator}</ErrorText>\n          ) : null}\n        </Grid>\n      </SecondContainer>\n    </>\n  );\n};\n\nexport const TokenSettings = (): JSX.Element => {\n  const { dispatch, state, updateCache } = useContext(CreatorContext);\n  const { memberSettings } = state.data;\n  const saveStepInfo = (\n    values: MemberSettings,\n    { setSubmitting }: { setSubmitting: (b: boolean) => void }\n  ) => {\n    updateCache({\n      ...state.data,\n      memberSettings: values,\n    });\n    setSubmitting(true);\n    dispatch({ type: ActionTypes.UPDATE_MEMBERS_SETTINGS, members: values });\n    dispatch({ type: ActionTypes.UPDATE_STEP, step: 3 });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        style={{ height: \"fit-content\" }}\n      >\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" color=\"textSecondary\">\n            Distribution Settings\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <CustomTypography variant=\"subtitle1\" color=\"textSecondary\">\n            These settings will define the name, symbol, and initial\n            distribution of your token.\n          </CustomTypography>\n        </Grid>\n      </Grid>\n      <Formik\n        enableReinitialize={true}\n        validate={validate}\n        onSubmit={saveStepInfo}\n        initialValues={memberSettings}\n      >\n        {({\n          submitForm,\n          isSubmitting,\n          setFieldValue,\n          values,\n          errors,\n          touched,\n        }) => {\n          return (\n            <Form style={{ width: \"100%\" }}>\n              <TokenSettingsForm\n                validate={validate}\n                submitForm={submitForm}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                touched={touched}\n                values={values}\n              />\n            </Form>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/Review.tsx",["372"],"import React, { useContext, useEffect, useMemo } from \"react\";\nimport { Button, Grid, styled, Typography } from \"@material-ui/core\";\nimport Rocket from \"../../../assets/img/rocket.svg\";\nimport { CreatorContext } from \"../state/context\";\nimport { useOriginateTreasury } from \"../../../services/contracts/baseDAO/hooks/useOriginateTreasury\";\nimport { fromStateToTreasuryStorage, getTokensInfo } from \"../state/utils\";\nimport { MetadataCarrierParameters } from \"../../../services/contracts/baseDAO/metadataCarrier/types\";\nimport { MigrationParams } from \"../../../services/contracts/baseDAO/types\";\n\nconst RocketImg = styled(\"img\")({\n  marginBottom: 46,\n});\n\nconst WaitingText = styled(Typography)({\n  marginTop: 9,\n});\n\nexport const Review: React.FC = () => {\n  const { state } = useContext(CreatorContext);\n  const info: MigrationParams = state.data;\n  const { frozenToken, unfrozenToken } = getTokensInfo(info);\n  const metadataCarrierParams: MetadataCarrierParameters = useMemo(\n    () => ({\n      keyName: info.orgSettings.name,\n      metadata: {\n        frozenToken,\n        unfrozenToken,\n        description: info.orgSettings.description,\n        authors: [info.memberSettings.administrator],\n      },\n    }),\n    [\n      frozenToken,\n      info.memberSettings.administrator,\n      info.orgSettings.description,\n      info.orgSettings.name,\n      unfrozenToken,\n    ]\n  );\n\n  const { mutate, isLoading, error, data } = useOriginateTreasury();\n\n  useEffect(() => {\n    (async () => {\n      if (!data && info && metadataCarrierParams)\n        mutate({\n          metadataParams: metadataCarrierParams,\n          treasuryParams: fromStateToTreasuryStorage(info),\n        });\n    })();\n  }, []);\n\n  console.log(error);\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n        style={{ height: \"fit-content\" }}\n      >\n        <Grid item xs={12}>\n          <RocketImg src={Rocket} alt=\"rocket\" />\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h4\" color=\"textSecondary\">\n            Deploying <strong> {state.data.orgSettings.name} </strong> to the\n            Tezos Network\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          {isLoading ? (\n            <WaitingText variant=\"subtitle1\" color=\"textSecondary\">\n              Waiting for confirmation...\n            </WaitingText>\n          ) : (\n            <>\n              <WaitingText variant=\"subtitle1\" color=\"textSecondary\">\n                Your DAO has been deployed!\n              </WaitingText>\n              <WaitingText variant=\"subtitle1\" color=\"textSecondary\">\n                {data?.address}\n              </WaitingText>\n              <Button>Go to my DAO</Button>\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/Governance.tsx",["373","374","375","376"],"import {\n  Grid,\n  Paper,\n  styled,\n  Typography,\n  Slider,\n  withStyles,\n  withTheme,\n} from \"@material-ui/core\";\nimport { TextField } from \"formik-material-ui\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Field, Form, Formik, getIn } from \"formik\";\n\nimport { CreatorContext } from \"../state/context\";\nimport { ActionTypes } from \"../state/types\";\nimport { handleGovernanceFormErrors } from \"../utils\";\nimport { VotingSettings } from \"../../../services/contracts/baseDAO/types\";\n\nconst CustomTypography = styled(Typography)({\n  paddingBottom: 10,\n  borderBottom: \"1px solid #3D3D3D\",\n  marginTop: 10,\n  marginBottom: 33,\n});\n\nconst ErrorText = styled(Typography)({\n  fontSize: 14,\n  color: \"red\",\n});\n\nconst SecondContainer = styled(Grid)({\n  marginTop: 10,\n});\n\nconst SpacingContainer = styled(Grid)({\n  marginTop: 25,\n});\n\nconst CustomInputContainer = styled(Grid)({\n  border: \"1px solid #3D3D3D\",\n  height: 62,\n  marginTop: 14,\n  \"&:first-child\": {\n    borderRight: \"none\",\n  },\n  \"&:last-child\": {\n    borderLeft: \"none\",\n  },\n});\n\nconst AdditionContainer = styled(Grid)({\n  border: \"1px solid #3D3D3D\",\n  height: 62,\n});\n\nconst GridItemCenter = styled(Grid)({\n  textAlign: \"center\",\n});\n\nconst ItemContainer = styled(Grid)({\n  height: \"100%\",\n  padding: 12,\n  \"&:hover\": {\n    background: \"rgba(129, 254, 183, 0.03)\",\n    borderLeft: \"2px solid #81FEB7\",\n  },\n});\n\nconst Title = styled(Typography)({\n  marginLeft: 10,\n});\n\nconst StyledSlider = withStyles({\n  root: {\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  valueLabel: {\n    textAlign: \"center\",\n  },\n  thumb: {\n    height: 20,\n    width: 20,\n    top: \"24.5%\",\n    backgroundColor: \"#fff\",\n    border: \"3px solid #fff\",\n  },\n  track: {\n    backgroundColor: \"#4BCF93\",\n    borderRadius: \"4px\",\n    height: 2,\n  },\n})(Slider);\n\nconst CustomSliderValue = styled(withTheme(Paper))((props) => ({\n  boxShadow: \"none\",\n  height: 62,\n  border: \"1px solid #3D3D3D\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  borderRadius: 0,\n  background: props.theme.palette.primary.main,\n}));\n\nconst Value = styled(Typography)({\n  textAlign: \"center\",\n  padding: \"15%\",\n});\n\nconst LastElement = styled(Grid)({\n  marginBottom: 37,\n});\n\nconst styles = {\n  voting: {\n    marginTop: 6,\n  },\n};\n\nconst GridNoPadding = styled(Grid)({\n  padding: \"0px !important\",\n});\n\n//@TODO: Remove any from this component\nconst GovernanceForm = ({\n  submitForm,\n  values,\n  setFieldValue,\n  errors,\n  touched,\n}: any) => {\n  const {\n    dispatch,\n    state: {\n      governanceStep,\n      activeStep,\n      data: { orgSettings },\n    },\n  } = useContext(CreatorContext);\n\n  useEffect(() => {\n    if (values) {\n      dispatch({\n        type: ActionTypes.UPDATE_NAVIGATION_BAR,\n        next: {\n          text: \"CONTINUE\",\n          handler: () => {\n            submitForm(values);\n          },\n        },\n        back: {\n          text: \"BACK\",\n          handler: () =>\n            dispatch({\n              type: ActionTypes.UPDATE_GOVERNANCE_STEP,\n              step: governanceStep - 1,\n            }),\n        },\n      });\n    }\n  }, [activeStep, dispatch, errors, governanceStep, submitForm, values]);\n\n  return (\n    <>\n      <SecondContainer container direction=\"row\">\n        <Typography\n          style={styles.voting}\n          variant=\"subtitle1\"\n          color=\"textSecondary\"\n        >\n          Voting Period Duration\n        </Typography>\n      </SecondContainer>\n\n      <Grid container direction=\"row\">\n        <CustomInputContainer item xs={4}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"votingDays\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">days</Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.votingDays && touched.votingDays ? (\n            <ErrorText>{errors.votingDays}</ErrorText>\n          ) : null}\n        </CustomInputContainer>\n        <CustomInputContainer item xs={4}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"votingHours\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">hours</Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.votingHours && touched.votingHours ? (\n            <ErrorText>{errors.votingHours}</ErrorText>\n          ) : null}\n        </CustomInputContainer>\n        <CustomInputContainer item xs={4}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"votingMinutes\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">minutes</Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.votingMinutes && touched.votingMinutes ? (\n            <ErrorText>{errors.votingMinutes}</ErrorText>\n          ) : null}\n        </CustomInputContainer>\n      </Grid>\n\n      <SecondContainer container direction=\"row\">\n        <Typography\n          style={styles.voting}\n          variant=\"subtitle1\"\n          color=\"textSecondary\"\n        >\n          Required Stake to Propose\n        </Typography>\n      </SecondContainer>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        style={{ marginTop: 14 }}\n      >\n        <AdditionContainer item xs={3}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"proposeStakeRequired\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">\n                {orgSettings.symbol}\n              </Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.proposeStakeRequired && touched.proposeStakeRequired ? (\n            <ErrorText>{errors.proposeStakeRequired}</ErrorText>\n          ) : null}\n        </AdditionContainer>\n        <Grid item xs={1}>\n          <Grid item container justify=\"center\">\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              +\n            </Typography>\n          </Grid>\n        </Grid>\n        <AdditionContainer item xs={2}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item>\n              <Field\n                name=\"proposeStakePercentage\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.proposeStakePercentage && touched.proposeStakePercentage ? (\n            <ErrorText>{errors.proposeStakePercentage}</ErrorText>\n          ) : null}\n        </AdditionContainer>\n        <Grid item xs={5}>\n          <Grid item container>\n            <Title variant=\"subtitle1\" color=\"textSecondary\">\n              * Proposal size\n            </Title>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <SecondContainer container direction=\"row\">\n        <Typography\n          style={styles.voting}\n          variant=\"subtitle1\"\n          color=\"textSecondary\"\n        >\n          Returned Stake After Proposal Rejection\n        </Typography>\n\n        <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\n          <GridNoPadding item xs={8}>\n            <Field name=\"frozenScaleValue\">\n              {() => (\n                <StyledSlider\n                  value={getIn(values, \"frozenScaleValue\")}\n                  onChange={(value: any, newValue: any) =>\n                    setFieldValue(\"frozenScaleValue\", newValue)\n                  }\n                />\n              )}\n            </Field>\n          </GridNoPadding>\n          <GridNoPadding item xs={4}>\n            <CustomSliderValue>\n              <Value variant=\"subtitle1\" color=\"textSecondary\">\n                {getIn(values, \"frozenScaleValue\")}% of Frozen {orgSettings.symbol}\n              </Value>\n            </CustomSliderValue>\n          </GridNoPadding>\n        </Grid>\n      </SecondContainer>\n\n      <SpacingContainer direction=\"row\" container alignItems=\"center\">\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          Transfer Amounts\n        </Typography>\n      </SpacingContainer>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        style={{ marginTop: 14 }}\n      >\n        <AdditionContainer item xs={4}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"minXtzAmount\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">Min. XTZ</Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.minXtzAmount && touched.minXtzAmount ? (\n            <ErrorText>{errors.minXtzAmount}</ErrorText>\n          ) : null}\n        </AdditionContainer>\n        <AdditionContainer item xs={4}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"maxXtzAmount\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">Max. XTZ </Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.maxXtzAmount && touched.maxXtzAmount ? (\n            <ErrorText>{errors.maxXtzAmount}</ErrorText>\n          ) : null}\n        </AdditionContainer>\n      </Grid>\n\n      <SpacingContainer direction=\"row\" container alignItems=\"center\">\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          Quorum Treshold\n        </Typography>\n      </SpacingContainer>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        style={{ marginTop: 14 }}\n      >\n        <AdditionContainer item xs={4}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"quorumTreshold\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">{orgSettings.symbol}</Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.quorumTreshold && touched.quorumTreshold ? (\n            <ErrorText>{errors.quorumTreshold}</ErrorText>\n          ) : null}\n        </AdditionContainer>\n      </Grid>\n\n      <SpacingContainer direction=\"row\" container alignItems=\"center\">\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          Maximum Proposal Size\n        </Typography>\n      </SpacingContainer>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        style={{ marginTop: 14, marginBottom: 37 }}\n      >\n        <AdditionContainer item xs={4}>\n          <ItemContainer\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n          >\n            <GridItemCenter item xs={6}>\n              <Field\n                name=\"maxProposalSize\"\n                type=\"number\"\n                placeholder=\"00\"\n                component={TextField}\n              ></Field>\n            </GridItemCenter>\n            <GridItemCenter item xs={6}>\n              <Typography color=\"textSecondary\">{orgSettings.symbol}</Typography>\n            </GridItemCenter>\n          </ItemContainer>\n          {errors.maxProposalSize && touched.maxProposalSize ? (\n            <ErrorText>{errors.maxProposalSize}</ErrorText>\n          ) : null}\n        </AdditionContainer>\n      </Grid>\n    </>\n  );\n};\n\n//@TODO: Remove any from this component\nexport const Governance: React.FC = () => {\n  const { dispatch, state, updateCache } = useContext(CreatorContext);\n  const { activeStep } = state;\n  const { votingSettings } = state.data;\n\n  const saveStepInfo = (\n    values: VotingSettings,\n    { setSubmitting }: { setSubmitting: (b: boolean) => void }\n  ) => {\n    const newState = {\n      ...state.data,\n      votingSettings: values,\n    };\n    updateCache(newState);\n    setSubmitting(true);\n    dispatch({ type: ActionTypes.UPDATE_VOTING_SETTINGS, voting: values });\n    dispatch({ type: ActionTypes.UPDATE_STEP, step: activeStep + 1 });\n  };\n\n  return (\n    <>\n      <Grid container direction=\"row\" justify=\"space-between\">\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" color=\"textSecondary\">\n            Proposals & Voting\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container direction=\"row\">\n        <Grid item xs={12}>\n          <CustomTypography variant=\"subtitle1\" color=\"textSecondary\">\n            These settings will define the duration, support and approval\n            required for proposals.\n          </CustomTypography>\n        </Grid>\n      </Grid>\n\n      <Formik\n        enableReinitialize\n        validate={(values: VotingSettings) =>\n          handleGovernanceFormErrors(values)\n        }\n        onSubmit={saveStepInfo}\n        initialValues={votingSettings}\n      >\n        {({\n          submitForm,\n          isSubmitting,\n          setFieldValue,\n          values,\n          errors,\n          touched,\n        }) => {\n          console.log(errors);\n          return (\n            <Form style={{ width: \"100%\" }}>\n              <GovernanceForm\n                validate={(values: VotingSettings) =>\n                  handleGovernanceFormErrors(values)\n                }\n                submitForm={submitForm}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                touched={touched}\n                values={values}\n              />\n            </Form>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/DaoSettings.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/Summary.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/steps/SelectTemplate.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/utils.ts",["377"],"import {\n  ErrorValues,\n  OrgSettings,\n  VotingSettings,\n} from \"../../services/contracts/baseDAO/types\";\n\nexport const handleOrgFormErrors = (\n  values: OrgSettings\n): ErrorValues<OrgSettings> => {\n  const errors: ErrorValues<OrgSettings> = {};\n  Object.keys(values).map((field) => {\n    const value = field as keyof OrgSettings;\n    if (!values[value]) errors[value] = \"Required\";\n  });\n  return errors;\n};\n\nexport const handleGovernanceFormErrors = (values: VotingSettings) => {\n  const errors: ErrorValues<VotingSettings> = {};\n  const {\n    votingDays,\n    votingHours,\n    votingMinutes,\n    proposeStakePercentage,\n    proposeStakeRequired,\n    maxProposalSize,\n    minXtzAmount,\n    maxXtzAmount,\n  } = values;\n\n  if (!votingDays && !votingHours && !votingMinutes) {\n    errors.votingMinutes = \"The voting time must be greater than 0 minutes\";\n  }\n  if (!proposeStakePercentage && !proposeStakeRequired) {\n    errors.proposeStakePercentage = \"The sum must be greater than 0\";\n  }\n\n  if (!maxProposalSize || maxProposalSize <= 0) {\n    errors.maxProposalSize = \"Must be greater than 0\";\n  }\n\n  if (!minXtzAmount || minXtzAmount <= 0) {\n    errors.minXtzAmount = \"Must be greater than 0\";\n  }\n\n  if (!maxXtzAmount || maxXtzAmount <= 0) {\n    errors.maxXtzAmount = \"Must be greater than 0\";\n  }\n\n  return errors;\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/TokenHoldersRow.tsx",["378"],"import React from \"react\";\nimport { Grid, styled, Typography } from \"@material-ui/core\";\nimport { TokenHolder } from \"../../daocreator/state/types\";\n\nconst Container = styled(Grid)({\n  borderBottom: \"1px solid #3D3D3D\",\n  padding: 2,\n});\n\nexport const TokenHoldersRow: React.FC<TokenHolder & { symbol: string }> = ({\n  address,\n  balance,\n  symbol\n}) => {\n  return (\n    <Container\n      container\n      direction=\"row\"\n      alignItems=\"center\"\n      justify=\"space-between\"\n    >\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {address\n            ? `${address.slice(0, 6)}...${address.slice(\n                address.length - 4,\n                address.length\n              )}`\n            : null}\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\" align=\"right\">\n          {balance} {symbol}\n        </Typography>\n      </Grid>\n    </Container>\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daocreator/state/utils.ts",["379","380"],"import { MetadataCarrierParameters } from \"../../../services/contracts/baseDAO/metadataCarrier/types\";\nimport {\n  MetadataStorageState,\n  Token,\n} from \"../../../services/contracts/baseDAO/treasuryDAO/types\";\nimport { MigrationParams } from \"../../../services/contracts/baseDAO/types\";\nimport { TokenHolder } from \"./types\";\n\nconst SECONDS_IN_MINUTE = 60;\nconst SECONDS_IN_HOUR = 60 * 60;\nconst SECONDS_IN_DAY = 60 * 60 * 24;\n\nexport const getTokensInfo = (\n  state: MigrationParams\n): MetadataStorageState[\"metadata\"] => {\n  const tokenInformation: Omit<Token, \"decimals\"> = { ...state.orgSettings };\n  return {\n    frozenToken: { ...tokenInformation, decimals: 18 },\n    unfrozenToken: { ...tokenInformation, decimals: 18 },\n  };\n};\n\nexport const fromStateToTreasuryStorage = (info: MigrationParams) => {\n  const membersTokenAllocation = info.memberSettings.tokenHolders.map(\n    (holder: TokenHolder) => ({\n      address: holder.address,\n      amount: holder.balance.toString(),\n      tokenId: \"0\",\n    })\n  );\n\n  const storageData = {\n    storage: {\n      membersTokenAllocation,\n      adminAddress: info.memberSettings.administrator || \"\",\n\n      frozenScaleValue: info.votingSettings.proposeStakePercentage,\n      frozenExtraValue: info.votingSettings.proposeStakeRequired,\n      slashScaleValue: info.votingSettings.frozenScaleValue,\n      slashDivisionValue: 100,\n\n      minXtzAmount: info.votingSettings.minXtzAmount,\n      maxXtzAmount: info.votingSettings.maxXtzAmount || 0,\n      maxProposalSize: info.votingSettings.maxProposalSize,\n      quorumTreshold: info.votingSettings.quorumTreshold,\n      votingPeriod:\n        (info.votingSettings.votingHours || 0) * SECONDS_IN_HOUR +\n        (info.votingSettings.votingDays || 0) * SECONDS_IN_DAY +\n        (info.votingSettings.votingMinutes || 0) * SECONDS_IN_MINUTE,\n    },\n  };\n\n  return storageData;\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/deploy.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/treasuryDAO/deploy.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/utils.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/code.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/metadata.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/treasuryDAO/code.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/pinata/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/pinata/utils.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/common/hooks/useLocalStorage.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/proposals/types.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/modules/daoexplorer/components/VoteDialog.tsx",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useDAOs.ts",["381"],"import { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getDAOs } from \"..\";\nimport { useTezos } from \"../../../beacon/hooks/useTezos\";\nimport { getContractsAddresses } from \"../../../pinata\";\nimport { DAOItem } from \"../types\";\n\nexport const useDAOs = () => {\n  const { tezos, connect, network } = useTezos();\n\n  const {\n    data: addresses,\n    isLoading: addressesLoading,\n    error: addressesError,\n  } = useQuery<string[], Error>(\"daosAddresses\", getContractsAddresses);\n\n  const daosAddresses = addresses || [];\n\n  const result = useQuery<DAOItem[], Error>(\n    [\"daos\", addresses],\n    async () => getDAOs(daosAddresses, tezos, network),\n    {\n      enabled: !!daosAddresses.length && !!tezos,\n    }\n  );\n\n  useEffect(() => {\n    if (!tezos) {\n      connect();\n    }\n  }, [connect, tezos]);\n\n  return {\n    ...result,\n    isLoading: result.isLoading || addressesLoading,\n    error: result.error || addressesError,\n  };\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useProposals.ts",["382"],"import { useQuery } from \"react-query\";\nimport { useTezos } from \"../../../beacon/hooks/useTezos\";\nimport { getDAOProposals } from \"..\";\nimport { ProposalWithStatus } from \"../../../bakingBad/proposals/types\";\nimport { useDAO } from \"./useDAO\";\nimport { DAOItem } from \"../types\";\n\nexport const useProposals = (contractAddress: string | undefined) => {\n  const { network } = useTezos();\n  const { data: daoData } = useDAO(contractAddress);\n\n  const result = useQuery<ProposalWithStatus[], Error>(\n    [\"proposals\", contractAddress],\n    () => getDAOProposals(daoData as DAOItem, network),\n    {\n      enabled: !!daoData,\n    }\n  );\n\n  return result;\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useProposal.ts",["383"],"import { ProposalWithStatus } from \"../../../bakingBad/proposals/types\";\nimport { useProposals } from \"./useProposals\";\nimport { useEffect, useState } from \"react\";\n\nexport const useProposal = (\n  daoAddress: string | undefined,\n  proposalKey: string\n) => {\n  const [proposal, setProposal] = useState<ProposalWithStatus>();\n  const { data } = useProposals(daoAddress);\n\n  useEffect(() => {\n    if (data && data.length) {\n      setProposal(data.find((proposal) => proposal.id === proposalKey));\n    }\n  }, [data, proposalKey]);\n\n  return proposal;\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useDAO.ts",["384"],"import { TezosToolkit } from \"@taquito/taquito\";\nimport { useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\nimport { getDAO } from \"..\";\nimport { useTezos } from \"../../../beacon/hooks/useTezos\";\nimport { DAOItem } from \"../types\";\n\nexport const useDAO = (address: string | undefined) => {\n  const { tezos, connect, network } = useTezos();\n  const queryClient = useQueryClient();\n\n  const result = useQuery<DAOItem, Error>(\n    [\"dao\", address],\n    () => getDAO(address as string, tezos as TezosToolkit, network),\n    {\n      enabled: !!tezos && !!address,\n      initialData: () => {\n        return queryClient\n          .getQueryData<DAOItem[]>(\"daos\")\n          ?.find((d) => d.address === address);\n      },\n    }\n  );\n\n  useEffect(() => {\n    if (!tezos) {\n      connect();\n    }\n  }, [connect, tezos]);\n\n  return result;\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useVote.ts",["385"],"import { TransactionWalletOperation } from \"@taquito/taquito\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { doDAOVote } from \"..\";\nimport { useTezos } from \"../../../beacon/hooks/useTezos\";\nimport { VoteParams } from \"../types\";\n\ntype UseVoteParams = Omit<VoteParams, \"tezos\">;\n\nexport const useVote = () => {\n  const queryClient = useQueryClient();\n  const { tezos, connect } = useTezos();\n\n  return useMutation<TransactionWalletOperation, Error, UseVoteParams>(\n    async (params) => {\n      return await doDAOVote({\n        ...params,\n        tezos: tezos || (await connect()),\n      });\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"votes\");\n      },\n    }\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/usePropose.ts",["386"],"import { TransactionWalletOperation } from \"@taquito/taquito\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { doDAOPropose } from \"..\";\nimport { useTezos } from \"../../../beacon/hooks/useTezos\";\nimport { ProposeParams } from \"../types\";\n\ntype UseProposeParams = Omit<ProposeParams, \"tezos\">;\n\nexport const usePropose = () => {\n  const queryClient = useQueryClient();\n  const { tezos, connect } = useTezos();\n\n  return useMutation<TransactionWalletOperation, Error, UseProposeParams>(\n    async (params) => {\n      return await doDAOPropose({\n        ...params,\n        tezos: tezos || (await connect()),\n      });\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"proposals\");\n      },\n    }\n  );\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/index.ts",["387","388","389","390"],"import { TezosToolkit } from \"@taquito/taquito\";\nimport { tzip16 } from \"@taquito/tzip16\";\nimport { mapLimit } from \"async\";\nimport { getLedgerAddresses } from \"../../bakingBad/ledger\";\nimport { getStorage } from \"../../bakingBad/storage\";\nimport { Network } from \"../../beacon/context\";\nimport { getDAOListMetadata } from \"./metadataCarrier\";\nimport {\n  DAOItem,\n  OriginateTreasuryParams,\n  ProposeParams,\n  VoteParams,\n} from \"./types\";\nimport { getProposals } from \"../../bakingBad/proposals\";\nimport {\n  Proposal,\n  ProposalStatus,\n  ProposalWithStatus,\n} from \"../../bakingBad/proposals/types\";\nimport { Ledger } from \"../../bakingBad/ledger/types\";\nimport { deployMetadataCarrier } from \"./metadataCarrier/deploy\";\nimport { deployTreasuryDAO } from \"./treasuryDAO/deploy\";\nimport dayjs from \"dayjs\";\nimport { getOriginationTime } from \"../../bakingBad/operations\";\n\nconst getContract = async (tezos: TezosToolkit, contractAddress: string) => {\n  return await tezos.wallet.at(contractAddress, tzip16);\n};\n\nexport const getDAOs = async (\n  addresses: string[],\n  tezos: TezosToolkit | undefined,\n  network: Network\n): Promise<DAOItem[]> => {\n  if (!tezos) {\n    return [];\n  }\n\n  return mapLimit(addresses, 5, async (address) =>\n    getDAOInfoFromContract(address, tezos, network)\n  );\n};\n\nexport const getDAOInfoFromContract = async (\n  contractAddress: string,\n  tezos: TezosToolkit,\n  network: Network\n): Promise<DAOItem> => {\n  const contract = await getContract(tezos, contractAddress);\n  const storage = await getStorage(contractAddress, network);\n  const metadata = await getDAOListMetadata(contract);\n  const ledger = await getLedgerAddresses(storage.ledgerMapNumber, network);\n  const originationTime = await getOriginationTime(contractAddress, network);\n  const cycle = Math.floor(\n    (Number(dayjs().unix()) - Number(dayjs(originationTime).unix())) /\n      storage.votingPeriod\n  );\n\n  return {\n    ...metadata,\n    address: contractAddress,\n    ...storage,\n    ledger,\n    cycle,\n  };\n};\n\nexport const getDAOProposals = async (\n  dao: DAOItem,\n  network: Network\n): Promise<ProposalWithStatus[]> => {\n  const { proposalsMapNumber } = dao;\n  const proposals = await getProposals(proposalsMapNumber, network);\n\n  return proposals.map((proposal) => {\n    const { votingPeriod, cycle: daoCycle, quorumTreshold } = dao;\n    const { startDate, upVotes, downVotes } = proposal;\n\n    const cycle = Math.floor(\n      (Number(dayjs().unix()) - Number(dayjs(startDate).unix())) / votingPeriod\n    );\n\n    //TODO: this business logic will change in the future\n\n    let status: ProposalStatus;\n\n    if (cycle === daoCycle) {\n      status = ProposalStatus.ACTIVE;\n    } else if (Number(upVotes) >= quorumTreshold) {\n      status = ProposalStatus.PASSED;\n    } else if (Number(downVotes) >= quorumTreshold) {\n      status = ProposalStatus.REJECTED;\n    } else {\n      status = ProposalStatus.DROPPED;\n    }\n\n    return {\n      ...proposal,\n      cycle,\n      status,\n    };\n  });\n};\n\nexport const getDAOTokenHolders = async (\n  contractAddress: string,\n  network: Network\n): Promise<Ledger> => {\n  const storage = await getStorage(contractAddress, network);\n  const ledger = await getLedgerAddresses(storage.proposalsMapNumber, network);\n\n  return ledger;\n};\n\nexport const doDAOOriginateTreasury = async ({\n  metadataParams,\n  treasuryParams,\n}: OriginateTreasuryParams) => {\n  const metadata = await deployMetadataCarrier(metadataParams);\n\n  if (!metadata) {\n    throw new Error(\n      `Could not deploy TreasuryDAO because MetadataCarrier contract deployment failed`\n    );\n  }\n\n  const treasury = await deployTreasuryDAO({\n    ...treasuryParams,\n    metadataCarrierDeploymentData: metadata,\n  });\n\n  if (!treasury) {\n    throw new Error(`Error deploying TreasuryDAO`);\n  }\n\n  return treasury;\n};\n\nexport const doDAOPropose = async ({\n  contractAddress,\n  tezos,\n  contractParams: { tokensToFreeze, agoraPostId, transfers },\n}: ProposeParams) => {\n  const contract = await getContract(tezos, contractAddress);\n\n  const result = await contract.methods\n    .propose(\n      tokensToFreeze,\n      agoraPostId,\n      transfers.map(({ amount, recipient }) => ({\n        transfer_type: {\n          amount,\n          recipient,\n        },\n      }))\n    )\n    .send();\n\n  return result;\n};\n\nexport const doDAOVote = async ({\n  contractAddress,\n  tezos,\n  proposalKey,\n  amount,\n  support,\n}: VoteParams) => {\n  const contract = await getContract(tezos, contractAddress);\n\n  const result = await contract.methods\n    .vote([\n      {\n        proposal_key: proposalKey,\n        vote_type: support,\n        vote_amount: amount,\n      },\n    ])\n    .send();\n\n  return result;\n};\n\nexport const getDAO = async (\n  address: string,\n  tezos: TezosToolkit,\n  network: Network\n): Promise<DAOItem> => {\n  return await getDAOInfoFromContract(address, tezos, network);\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/hooks/useOriginateTreasury.ts",["391"],"import { ContractAbstraction, ContractProvider } from \"@taquito/taquito\";\nimport { OriginateTreasuryParams } from \"../types\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { doDAOOriginateTreasury } from \"..\";\n\nexport const useOriginateTreasury = () => {\n  const queryClient = useQueryClient();\n\n  const result = useMutation<\n    ContractAbstraction<ContractProvider>,\n    Error,\n    OriginateTreasuryParams\n  >(doDAOOriginateTreasury, {\n    onSuccess: () => {\n      queryClient.invalidateQueries(\"daos\");\n    },\n  });\n\n  return result;\n};\n","/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/operations/index.ts",["392"],"import { API_URL } from \"..\";\nimport { Network } from \"../../beacon/context\";\n\n//TODO make DTO for this one\nexport const getOriginationTime = async (\n  contractAddress: string,\n  network: Network\n): Promise<string> => {\n  const url = `${API_URL}/contract/${network}/${contractAddress}/operations`;\n\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch contract operations from BakingBad API\");\n  }\n\n  const result: any = await response.json();\n\n  return result.operations.find(\n    (operation: any) => operation.kind === \"origination\"\n  ).timestamp;\n};","/Users/fabiolalombardi/Desktop/homebase-app/src/services/contracts/baseDAO/metadataCarrier/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/proposals/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/storage/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/ledger/index.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/proposals/mappers.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/ledger/mappers.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/storage/mapper.ts",[],"/Users/fabiolalombardi/Desktop/homebase-app/src/services/bakingBad/index.ts",[],{"ruleId":"393","severity":1,"message":"394","line":5,"column":10,"nodeType":"395","messageId":"396","endLine":5,"endColumn":13},{"ruleId":"397","severity":1,"message":"398","line":8,"column":7,"nodeType":null,"endLine":8,"endColumn":7,"fix":"399"},{"ruleId":"393","severity":1,"message":"400","line":11,"column":10,"nodeType":"395","messageId":"396","endLine":11,"endColumn":21},{"ruleId":"393","severity":1,"message":"401","line":12,"column":10,"nodeType":"395","messageId":"396","endLine":12,"endColumn":18},{"ruleId":"397","severity":1,"message":"398","line":19,"column":20,"nodeType":null,"endLine":19,"endColumn":20,"fix":"402"},{"ruleId":"397","severity":1,"message":"398","line":28,"column":18,"nodeType":null,"endLine":28,"endColumn":18,"fix":"403"},{"ruleId":"397","severity":1,"message":"398","line":36,"column":16,"nodeType":null,"endLine":36,"endColumn":16,"fix":"404"},{"ruleId":"397","severity":1,"message":"398","line":41,"column":19,"nodeType":null,"endLine":41,"endColumn":19,"fix":"405"},{"ruleId":"397","severity":1,"message":"398","line":47,"column":20,"nodeType":null,"endLine":47,"endColumn":20,"fix":"406"},{"ruleId":"397","severity":1,"message":"398","line":54,"column":20,"nodeType":null,"endLine":54,"endColumn":20,"fix":"407"},{"ruleId":"397","severity":1,"message":"398","line":57,"column":38,"nodeType":null,"endLine":57,"endColumn":38,"fix":"408"},{"ruleId":"397","severity":1,"message":"398","line":60,"column":22,"nodeType":null,"endLine":60,"endColumn":22,"fix":"409"},{"ruleId":"397","severity":1,"message":"398","line":64,"column":37,"nodeType":null,"endLine":64,"endColumn":37,"fix":"410"},{"ruleId":"397","severity":1,"message":"398","line":65,"column":4,"nodeType":null,"endLine":65,"endColumn":4,"fix":"411"},{"ruleId":"397","severity":1,"message":"412","line":2,"column":9,"nodeType":null,"endLine":4,"endColumn":1,"fix":"413"},{"ruleId":"393","severity":1,"message":"414","line":1,"column":29,"nodeType":"395","messageId":"396","endLine":1,"endColumn":38},{"ruleId":"393","severity":1,"message":"400","line":12,"column":10,"nodeType":"395","messageId":"396","endLine":12,"endColumn":21},{"ruleId":"393","severity":1,"message":"401","line":16,"column":10,"nodeType":"395","messageId":"396","endLine":16,"endColumn":18},{"ruleId":"393","severity":1,"message":"415","line":20,"column":10,"nodeType":"395","messageId":"396","endLine":20,"endColumn":22},{"ruleId":"393","severity":1,"message":"416","line":21,"column":10,"nodeType":"395","messageId":"396","endLine":21,"endColumn":30},{"ruleId":"397","severity":1,"message":"417","line":80,"column":1,"nodeType":null,"endLine":80,"endColumn":3,"fix":"418"},{"ruleId":"397","severity":1,"message":"419","line":82,"column":65,"nodeType":null,"endLine":83,"endColumn":1,"fix":"420"},{"ruleId":"393","severity":1,"message":"421","line":104,"column":29,"nodeType":"395","messageId":"396","endLine":104,"endColumn":37},{"ruleId":"393","severity":1,"message":"422","line":104,"column":50,"nodeType":"395","messageId":"396","endLine":104,"endColumn":60},{"ruleId":"393","severity":1,"message":"423","line":107,"column":9,"nodeType":"395","messageId":"396","endLine":107,"endColumn":20},{"ruleId":"393","severity":1,"message":"424","line":109,"column":9,"nodeType":"395","messageId":"396","endLine":109,"endColumn":23},{"ruleId":"393","severity":1,"message":"425","line":136,"column":32,"nodeType":"395","messageId":"396","endLine":136,"endColumn":41},{"ruleId":"393","severity":1,"message":"426","line":136,"column":43,"nodeType":"395","messageId":"396","endLine":136,"endColumn":48},{"ruleId":"427","severity":1,"message":"428","line":148,"column":6,"nodeType":"429","endLine":148,"endColumn":21,"suggestions":"430"},{"ruleId":"427","severity":1,"message":"428","line":158,"column":6,"nodeType":"429","endLine":158,"endColumn":21,"suggestions":"431"},{"ruleId":"397","severity":1,"message":"432","line":165,"column":43,"nodeType":null,"endLine":165,"endColumn":83,"fix":"433"},{"ruleId":"427","severity":1,"message":"428","line":166,"column":6,"nodeType":"429","endLine":166,"endColumn":21,"suggestions":"434"},{"ruleId":"393","severity":1,"message":"435","line":37,"column":7,"nodeType":"395","messageId":"396","endLine":37,"endColumn":23},{"ruleId":"393","severity":1,"message":"436","line":105,"column":7,"nodeType":"395","messageId":"396","endLine":105,"endColumn":14},{"ruleId":"393","severity":1,"message":"437","line":110,"column":7,"nodeType":"395","messageId":"396","endLine":110,"endColumn":13},{"ruleId":"393","severity":1,"message":"438","line":118,"column":7,"nodeType":"395","messageId":"396","endLine":118,"endColumn":15},{"ruleId":"393","severity":1,"message":"439","line":126,"column":7,"nodeType":"395","messageId":"396","endLine":126,"endColumn":21},{"ruleId":"393","severity":1,"message":"440","line":131,"column":7,"nodeType":"395","messageId":"396","endLine":131,"endColumn":18},{"ruleId":"393","severity":1,"message":"441","line":139,"column":7,"nodeType":"395","messageId":"396","endLine":139,"endColumn":19},{"ruleId":"393","severity":1,"message":"442","line":144,"column":7,"nodeType":"395","messageId":"396","endLine":144,"endColumn":13},{"ruleId":"393","severity":1,"message":"443","line":157,"column":7,"nodeType":"395","messageId":"396","endLine":157,"endColumn":14},{"ruleId":"393","severity":1,"message":"444","line":169,"column":7,"nodeType":"395","messageId":"396","endLine":169,"endColumn":14},{"ruleId":"397","severity":1,"message":"398","line":5,"column":15,"nodeType":null,"endLine":5,"endColumn":15,"fix":"445"},{"ruleId":"393","severity":1,"message":"414","line":9,"column":17,"nodeType":"395","messageId":"396","endLine":9,"endColumn":26},{"ruleId":"393","severity":1,"message":"446","line":13,"column":10,"nodeType":"395","messageId":"396","endLine":13,"endColumn":18},{"ruleId":"393","severity":1,"message":"416","line":14,"column":10,"nodeType":"395","messageId":"396","endLine":14,"endColumn":30},{"ruleId":"397","severity":1,"message":"447","line":69,"column":38,"nodeType":null,"endLine":69,"endColumn":38,"fix":"448"},{"ruleId":"393","severity":1,"message":"449","line":1,"column":17,"nodeType":"395","messageId":"396","endLine":1,"endColumn":24},{"ruleId":"393","severity":1,"message":"450","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"393","severity":1,"message":"451","line":20,"column":6,"nodeType":"395","messageId":"396","endLine":20,"endColumn":19},{"ruleId":"397","severity":1,"message":"398","line":110,"column":5,"nodeType":null,"endLine":110,"endColumn":5,"fix":"452"},{"ruleId":"393","severity":1,"message":"453","line":137,"column":7,"nodeType":"395","messageId":"396","endLine":137,"endColumn":20},{"ruleId":"393","severity":1,"message":"454","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":17},{"ruleId":"393","severity":1,"message":"455","line":116,"column":9,"nodeType":"395","messageId":"396","endLine":116,"endColumn":31},{"ruleId":"427","severity":1,"message":"456","line":51,"column":6,"nodeType":"429","endLine":51,"endColumn":8,"suggestions":"457"},{"ruleId":"393","severity":1,"message":"458","line":111,"column":7,"nodeType":"395","messageId":"396","endLine":111,"endColumn":18},{"ruleId":"397","severity":1,"message":"459","line":350,"column":63,"nodeType":null,"endLine":350,"endColumn":63,"fix":"460"},{"ruleId":"397","severity":1,"message":"461","line":445,"column":49,"nodeType":null,"endLine":445,"endColumn":69,"fix":"462"},{"ruleId":"397","severity":1,"message":"461","line":482,"column":49,"nodeType":null,"endLine":482,"endColumn":69,"fix":"463"},{"ruleId":"464","severity":1,"message":"465","line":18,"column":43,"nodeType":"466","messageId":"467","endLine":18,"endColumn":70},{"ruleId":"397","severity":1,"message":"398","line":13,"column":9,"nodeType":null,"endLine":13,"endColumn":9,"fix":"468"},{"ruleId":"393","severity":1,"message":"469","line":1,"column":10,"nodeType":"395","messageId":"396","endLine":1,"endColumn":35},{"ruleId":"464","severity":1,"message":"465","line":23,"column":43,"nodeType":"466","messageId":"467","endLine":23,"endColumn":69},{"ruleId":"464","severity":1,"message":"465","line":8,"column":24,"nodeType":"466","messageId":"467","endLine":8,"endColumn":29},{"ruleId":"464","severity":1,"message":"465","line":8,"column":29,"nodeType":"466","messageId":"467","endLine":8,"endColumn":69},{"ruleId":"464","severity":1,"message":"465","line":5,"column":28,"nodeType":"466","messageId":"467","endLine":8,"endColumn":5},{"ruleId":"464","severity":1,"message":"465","line":8,"column":23,"nodeType":"466","messageId":"467","endLine":8,"endColumn":55},{"ruleId":"464","severity":1,"message":"465","line":9,"column":24,"nodeType":"466","messageId":"467","endLine":9,"endColumn":29},{"ruleId":"464","severity":1,"message":"465","line":9,"column":27,"nodeType":"466","messageId":"467","endLine":9,"endColumn":32},{"ruleId":"393","severity":1,"message":"450","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"464","severity":1,"message":"465","line":115,"column":39,"nodeType":"466","messageId":"467","endLine":118,"endColumn":31},{"ruleId":"464","severity":1,"message":"465","line":139,"column":29,"nodeType":"466","messageId":"467","endLine":143,"endColumn":21},{"ruleId":"464","severity":1,"message":"465","line":162,"column":26,"nodeType":"466","messageId":"467","endLine":168,"endColumn":18},{"ruleId":"464","severity":1,"message":"465","line":6,"column":37,"nodeType":"466","messageId":"467","endLine":6,"endColumn":42},{"ruleId":"397","severity":1,"message":"470","line":22,"column":3,"nodeType":null,"endLine":22,"endColumn":3,"fix":"471"},"@typescript-eslint/no-unused-vars","'DAO' is defined but never used.","Identifier","unusedVar","prettier/prettier","Insert `,`",{"range":"472","text":"473"},"'useSelector' is defined but never used.","'AppState' is defined but never used.",{"range":"474","text":"473"},{"range":"475","text":"473"},{"range":"476","text":"473"},{"range":"477","text":"473"},{"range":"478","text":"473"},{"range":"479","text":"473"},{"range":"480","text":"473"},{"range":"481","text":"473"},{"range":"482","text":"473"},{"range":"483","text":"473"},"Replace `⏎··MigrationParams,⏎` with `·MigrationParams·`",{"range":"484","text":"485"},"'useEffect' is defined but never used.","'TezosContext' is defined but never used.","'addNewContractToIPFS' is defined but never used.","Delete `··`",{"range":"486","text":"487"},"Delete `⏎`",{"range":"488","text":"487"},"'daoError' is assigned a value but never used.","'daoLoading' is assigned a value but never used.","'description' is assigned a value but never used.","'quorumTreshold' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'dao?.address'. Either include it or remove the dependency array.","ArrayExpression",["489"],["490"],"Replace `·mapProposalData(proposal,·dao?.address)` with `⏎······mapProposalData(proposal,·dao?.address)⏎····`",{"range":"491","text":"492"},["493"],"'DetailsContainer' is assigned a value but never used.","'BoxItem' is assigned a value but never used.","'Detail' is assigned a value but never used.","'MetaData' is assigned a value but never used.","'HistoryContent' is assigned a value but never used.","'HistoryItem' is assigned a value but never used.","'HistoryBadge' is assigned a value but never used.","'styles' is assigned a value but never used.","'Details' is assigned a value but never used.","'History' is assigned a value but never used.",{"range":"494","text":"473"},"'MockDAOs' is defined but never used.","Insert `;`",{"range":"495","text":"496"},"'useMemo' is defined but never used.","'Proposal' is defined but never used.","'ProgressColor' is defined but never used.",{"range":"497","text":"473"},"'PROPOSAL_SIZE' is assigned a value but never used.","'InputAdornment' is defined but never used.","'handleLedgerValidation' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'info', 'metadataCarrierParams', and 'mutate'. Either include them or remove the dependency array.",["498"],"'LastElement' is assigned a value but never used.","Insert `{\"·\"}⏎···············`",{"range":"499","text":"500"},"Replace `{orgSettings.symbol}` with `⏎················{orgSettings.symbol}⏎··············`",{"range":"501","text":"502"},{"range":"503","text":"502"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",{"range":"504","text":"473"},"'MetadataCarrierParameters' is defined but never used.","Insert `⏎`",{"range":"505","text":"506"},[77,77],",",[503,503],[673,673],[800,800],[888,888],[993,993],[1091,1091],[1149,1149],[1191,1191],[1275,1275],[1279,1279],[85,105]," MigrationParams ",[1928,1930],"",[2063,2064],{"desc":"507","fix":"508"},{"desc":"507","fix":"509"},[4036,4076],"\n      mapProposalData(proposal, dao?.address)\n    ",{"desc":"507","fix":"510"},[87,87],[1661,1661],";",[2322,2322],{"desc":"511","fix":"512"},[9104,9104],"{\" \"}\n               ",[12014,12034],"\n                {orgSettings.symbol}\n              ",[13181,13201],[347,347],[596,596],"\n","Update the dependencies array to be: [dao?.address, proposalsData]",{"range":"513","text":"514"},{"range":"515","text":"514"},{"range":"516","text":"514"},"Update the dependencies array to be: [data, info, metadataCarrierParams, mutate]",{"range":"517","text":"518"},[3575,3590],"[dao?.address, proposalsData]",[3886,3901],[4084,4099],[1691,1693],"[data, info, metadataCarrierParams, mutate]"]